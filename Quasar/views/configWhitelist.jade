extends layout

block headerAdditions
  link(rel="stylesheet", type="text/css", href="configstyle.css", media="screen")
  link(rel="stylesheet", type="text/css", href="/dojo/dojox/grid/resources/Grid.css")
  link(rel="stylesheet", type="text/css", href="/dojo/dojox/grid/resources/claroGrid.css")

  script
    var grid;
    
    function deleteSelectedItems() {
      var items = grid.selection.getSelected();
      var names = [];
      dojo.forEach(items, function(selectedItem) {
        names.push(grid.store.getValues(selectedItem, "whitelistedIp")); 
      });
      
      try {
        now.deleteWhitelistEntry(names, errorMessageCallback);
      } catch(err) {
        alert("Action failed! Unable to connect to server. Try refreshing the page.");
        console.log("Caught error was: " + err);
      }
    }

    function addNewItem()
    {
        var value = dojo.byId("newEntry").value;
        var interfaceDropdown = document.getElementById("interfaceDropdown");
        var interface = interfaceDropdown.options[interfaceDropdown.selectedIndex].value;
        console.log("Value is " + value);

        var individualIp = new RegExp("^((((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\.){3,3})(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2}))$");
        individualIp.global = false;
        var subnetRangeIp = new RegExp("^((((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\.){3,3})(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\/[1-3]?[0-9])$");
        subnetRangeIp.global = false;
        var slashSubnetMaskIp = new RegExp("^((((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\.){3,3})(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2}))\\/((((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\.){3,3})(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2}))$");
        slashSubnetMaskIp.global = false;
        
        // only add the value to the ipWhitelist if value is either an individual IP or a subnet-style ip "range"
        if(individualIp.test(value) || subnetRangeIp.test(value) || slashSubnetMaskIp.test(value))
        {
          try 
          {
            now.addWhitelistEntry(interface, value, errorMessageCallback);
          } 
          catch(err) 
          {
            alert("Action failed! Unable to connect to server. Try refreshing the page.");
            console.log("Caught error was: " + err);
          }
          document.getElementById("errorLabel").innerHTML = "Valid entry found. Adding to the whitelist.";
        }
        else
        {
          document.getElementById("errorLabel").innerHTML = "Invalid IP string";
        }
    }

    
    function errorMessageCallback(success, message) {
      if(success != true) {
        var dialog = new dijit.Dialog({title: "Error", content: "Unable to complete operation due to error: " + message});
        dialog.show();
        return;
      }
      location.reload(true);
    }

    require(["dojox/grid/DataGrid","dojo/data/ObjectStore","dojo/domReady!", "dojox/data/HtmlStore", "dijit/Dialog"],

    function(DataGrid,ObjectStore){
      var gridStore = new dojox.data.HtmlStore({dataId:"profileTable"});
      grid = new dojox.grid.DataGrid({store:gridStore,structure:'layoutProfiles',query:{},rowsPerPage:40, autoWidth:true});
      dojo.byId("gridDiv").appendChild(grid.domNode);
    });
  
  script(type="text/javascript")
          /*set up data store*/
          var layoutProfiles = [[
            { field: "whitelistedIp", name: "Whitelist Entry", width: '500px' },
          ]];

block content
  h1 Current Whitelisted IPs
  table#profileTable(style="display: none")
    thead
      tr
        th whitelistedIp
    tbody
      each ip, i in whitelistedIps
        tr
          td #{ip}
      each ip, i in whitelistedRanges
        tr
          td #{ip}
 
  div(style="height: 250px;")
    div#gridDiv(style="height: 250px")
  br
  button(onClick="deleteSelectedItems()") Delete Selected Entry
  
  br
  br
  label(id="errorLabel", style="color:red")
  br

  label Interface
  select(id='interfaceDropdown', name='interfaceDropdown')
    option(value="All Interfaces") All Interfaces
    each interface, i in INTERFACES
      option(value="#{interface}") #{interface}
  br
  label IP Address or IP/netmask combination
  input#newEntry(type="text", value ="x.x.x.x")
  br

  button(onClick="addNewItem()") Add to Whitelist
 

