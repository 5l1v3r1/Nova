extends layout

block headerAdditions
  link(rel="stylesheet", type="text/css", href="configstyle.css", media="screen")
  style(type="text/css")
    a.selectedProfile, a.unselectedProfile {
        display: block;
        font-size: 12px;
        font-weight: bold;
        border: 1px solid black;
        padding: 2px;
        margin: 5px;
        height: 100%;
    }

    a.unselectedProfile:hover {
        background-color: rgba(255,0,0,0.2);
        clear: both;
    }

    a.selectedProfile {
        background-color: rgba(255,0,0,0.8);
    }

    a.unselectedProfile {
        background-color: rgba(255,0,0,0,0.8);
    }

    ul {
        margin-bottom: 20px;
        display: block; 
        list-style-type:disc;
    }

    #treeDiv {
        display: inline-block;
        padding: 2px;
        border-style: solid;
        border-color: black;
    }

    li {
        -moz-user-select: none;
        -webkit-user-select: none;
    }
    
  script
    var configurationList = !{JSON.stringify(configurations)};
    var theDoc = document;
    var profilesArray = {};
    
    function closeLightbox()
    {
      theDoc.getElementById('lightbox').style.display = 'none';
      theDoc.getElementById('hideme').style.opacity = '1.0'; 
      while(theDoc.getElementById('cloneMe').hasChildNodes())
      {
        theDoc.getElementById('cloneMe').removeChild(theDoc.getElementById('cloneMe').lastChild);
      }
    }
    
    function newConfiguration(configName, cloneInfo)
    {
      var cloneConfig = cloneInfo;
      if(cloneInfo == undefined)
      {
        console.log('Creating empty configuration ' + configName);
      }
      else 
      {
        console.log('Creating clone configuration ' + configName + ' based on ' + cloneInfo);
      }
    }
    
    function populateConfigSelect(configs)
    {
      if(theDoc.getElementById('configurations').hasChildNodes())
      {
        while(theDoc.getElementById('configurations').hasChildNodes())
        {
          theDoc.getElementById('configurations').removeChild(theDoc.getElementById('configurations').lastChild);
        }
      }
      
      if(configs == undefined || configs == '')
      {
        console.log('no configs sent');
        var option = theDoc.createElement('option');
        option.value = 'None';
        option.innerHTML = 'None';
        option.id = 'None';
        theDoc.getElementById('configurations').appendChild(option);
      }
      else
      {
        var selected = false;
        for(var i in configs)
        {
          if(configs[i] != '' && configs[i] != undefined)
          {
            var option = theDoc.createElement('option');
            if(!selected)
            {
              option.selected = 'selected';
              selected = true;
            }
            option.value = configs[i];
            option.innerHTML = configs[i];
            option.id = configs[i];
            theDoc.getElementById('configurations').appendChild(option);
          }
        }
        GetConfigurationSummary();
      }
    }
    
    function GetConfigurationSummary(configArg)
    {
      while(theDoc.getElementById('appendHook').hasChildNodes())
      {
        theDoc.getElementById('appendHook').removeChild(theDoc.getElementById('appendHook').lastChild);
      }
      var config;
      if(configArg == undefined)
      {
        config = theDoc.getElementById('configurations').value;
      }
      else
      {
        config = configArg;
      }
      if(typeof now.SwitchConfigurationTo == 'function')
      {
        now.SwitchConfigurationTo(config); 
      }
      else
      {
        console.log('now.SwitchConfigurationTo(configName) is not defined, doing nothing');
        return;
      }
      if(typeof now.GetConfigSummary == 'function')
      {
        now.GetConfigSummary(config, function(scriptProfileBindings, profileObj, profiles){
          // manipulate elements here (i.e. pi charts, text, tables, etc.)
          // Will all be contained in the object parseMe that will use the 
          // object literal notation of javascript to allow the server side
          // to do the calculations, and then send exactly the data required to
          // the browser.
          for(var i in scriptProfileBindings)
          {
            var tr = theDoc.createElement('tr');
            var td0 = theDoc.createElement('td');
            var td1 = theDoc.createElement('td');
            var scriptName = theDoc.createElement('label');
            scriptName.innerHTML = i;
            var profilesPorts = theDoc.createElement('label');
            profilesPorts.innerHTML = scriptProfileBindings[i];
            td0.appendChild(scriptName);
            td1.appendChild(profilesPorts);
            tr.appendChild(td0);
            tr.appendChild(td1);
            theDoc.getElementById('appendHook').appendChild(tr);
          }
          
          for(var i in profileObj)
          {
            var profile = {};
            profile.name = profileObj[i].name;
            profile.parent = profileObj[i].parent;
            profile.children = [];
            profile.isSelected = false;
            profile.listElement = null;
            profilesArray[profile.name] = profile;
          }
          
          for(var i in profilesArray)
          {
            for(var j in profilesArray)
            {
              if(profilesArray[j].parent == profilesArray[i].name)
              {
                profilesArray[i].children.push(profilesArray[j].name);
              }
            }
          }
          
          var treeDiv = theDoc.getElementById('treeDiv');
          
          var drawNode = function(profile, parentDOMNode){
            var li = theDoc.createElement('li');
            var a = theDoc.createElement('a');
            profilesArray[profile].listElement = a;
            a.innerHTML = profile;
            a.className = 'unselectedProfile';
            a.setAttribute('onclick', 'onProfileClicked("' + profile + '")');
            
            li.appendChild(a);
            parentDOMNode.appendChild(li);
            
            if(profilesArray[profile].children.length)
            {
              var ul = theDoc.createElement('ul');
              li.appendChild(ul);  
            }
            
            for(var i = 0; i < profilesArray[profile].children.length; i++)
            {
              drawNode(profilesArray[profilesArray[profile].children[i]].name, ul);
            }
          }
          
          drawNode("default", treeDiv);
          
        })
      }
      else
      {
        console.log('now.GetConfigSummary(configName, callback) is not defined, doing nothing');
        return;
      }
    }
    
    function showLightBox(divIndex)
    {
      theDoc.getElementById('hideme').style.opacity='0.5';
      theDoc.getElementById('lightbox').style.display='block';
      if(divIndex == '0')
      {
        theDoc.getElementById('addConfigForm').style.display='block';
        theDoc.getElementById('newName').value = '';
        theDoc.getElementById('cloneConfigForm').style.display='none';
      }
      else if(divIndex == '1')
      {
        theDoc.getElementById('addConfigForm').style.display='none';
        theDoc.getElementById('cloneConfigForm').style.display='block';
        theDoc.getElementById('newNameClone').value = '';
        for(var i in configurationList)
        {
          var option = theDoc.createElement('option');
          option.value = configurationList[i];
          option.innerHTML = configurationList[i];
          theDoc.getElementById('cloneMe').appendChild(option);
        }
      }
    }
    
    function checkExistingName(configName)
    {
      for(var i in configurationList)
      {
        if(configurationList[i] == configName)
        {
          return true;
        }
      }
      
      return false;
    }
    
    function checkParametersAdd()
    {
      if(theDoc.getElementById('newName').value == '')
      {
        alert('Must give a new name for New Configurations');
        return false;
      }
      else if(checkExistingName(theDoc.getElementById('newName').value) == true)
      {
        alert('Cannot add cloned configuration that has the same name as a present configuration');
        return false;
      }
      else
      {
        return true;
      }
    }
    
    function checkParametersClone()
    { 
      if(theDoc.getElementById('newNameClone').value == '')
      {
        alert('Must give a new name for Cloned Configurations');
        return false;
      }
      else if(checkExistingName(theDoc.getElementById('newNameClone').value) == true)
      {
        alert('Cannot add cloned configuration that has the same name as a present configuration');
        return false;
      }
      else
      {
        return true;
      }      
    }
    
    function removeConfig()
    {
      var configToRemove = theDoc.getElementById('configurations').value;
      if(configToRemove == 'default')
      {
        alert('Cannot remove default configuration');
        return;
      }
      else if(confirm('Are you sure you want to remove configuration ' + configToRemove + '? This cannot be undone.'))
      {
        if(typeof now.RemoveConfiguration == 'function')
        {
          now.RemoveConfiguration(configToRemove, function(name){
            theDoc.getElementById('default').selected = true;
            theDoc.getElementById('configurations').removeChild(theDoc.getElementById(name));
            GetConfigurationSummary();
          });
        }
        else
        {
          alert('Could not remove configuration, now.RemoveConfiguration not found');
        }
      }
      else
      {
        return;
      }
    }
    
    now.ready(function(){
      populateConfigSelect(configurationList);
    });
  
block content
  div#hideme
    h1 Configuration Summary
    select#configurations(onchange='GetConfigurationSummary()') Configuration
    br
    br
    div#addNewConfig
      button#addConfig(onclick='showLightBox("0")') Add Configuration
      button#cloneConfig(onclick='showLightBox("1")') Clone Configuration
      button#removeConfig(onclick='removeConfig()') Remove Configuration
    br
    div#summary
      table(border='1', style='border: solid black 2px;')
        thead
          tr
            th(style='background-color: #d0e9fc;') Scripts
            th(style='background-color: #d0e9fc;') Profile:Port
        tbody#appendHook
      br
      br
      div#treeAndPiContainer
        div#treeDiv
      br
      br
  div#lightbox(class='white_content')
    div#addConfigForm
      form(method='post', id='addConfig', onsubmit='return checkParametersAdd();')
        label Name For New Configuration 
        input#newName(name='newName')
        br
        button#submitAdd Submit
    div#cloneConfigForm
      form(method='post', id='cloneConfig', onsubmit='return checkParametersClone();')
        label Name For Cloned Configuration
        input#newNameClone(name='newNameClone')
        br
        label Select Configuration to Clone:
        select#cloneMe(name='cloneSelect')
        br
        button#submitClone Submit
    button#closeLB(onclick='closeLightbox()') Close
