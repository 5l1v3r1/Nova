extends layout

block headerAdditions
  link(rel="stylesheet", type="text/css", href="configstyle.css", media="screen")
  link(rel="stylesheet", type="text/css", href="/dojo/dojox/grid/resources/Grid.css")
  link(rel="stylesheet", type="text/css", href="/dojo/dojox/grid/resources/claroGrid.css")

  script
    var grid;
    var currentInterface;

    function createNodes() {
        var ipType = document.getElementById("ipType").value;
        var ip1 = document.getElementById("ip1").value;
        var ip2 = document.getElementById("ip2").value;
        var ip3 = document.getElementById("ip3").value;
        var ip4 = document.getElementById("ip4").value;
        var profile = document.getElementById("profile").value;
        var count = document.getElementById("nodeCount").value;
        var interface = currentInterface;

        now.createHoneydNodes(ipType, ip1, ip2, ip3, ip4, profile, interface, "", count, createNodesCallback);
    }

    function createNodesCallback(err) {
        if (err) {
            alert("Unable to create nodes due to error: " + err);
        } else {
            now.IsHaystackUp(checkIfRestartNeeded); 
        }
    }

    function checkIfRestartNeeded(haystackUp) {
      if (haystackUp) {
        var restartHaystack = confirm("You must restart the haystack for this to take effect. Restart it now?");
        if (restartHaystack) {
          now.StopHaystack();
          now.StartHaystack();
        }
      }
      location.reload(true);
    }
    
    function ipTypeChanged() {
      var ipEditEnabled;
      if (document.getElementById("ipType").value == "DHCP") {
        ipEditEnabled = true;
      } else {
        ipEditEnabled = false;
      }
      document.getElementById("ip1").disabled = ipEditEnabled;
      document.getElementById("ip2").disabled = ipEditEnabled;
      document.getElementById("ip3").disabled = ipEditEnabled;
      document.getElementById("ip4").disabled = ipEditEnabled;
     }
    
    function deleteSelectedItems() {
      // This still isn't working properly, but I wanted to revert it to
      // it's last point nonetheless. I have a question posted in stack overflow
      // about it, if that doesn't bear any fruit than we may have to 
      // move away from a DataGrid and try something else.
      var items = grid.selection.getSelected();
      var names = [];
      
      dojo.forEach(items, function(selectedItem) {
        names.push(grid.store.getValues(selectedItem, "Name"));
      });
     
      try {
        now.deleteNodes(names, errorMessageCallback);
      } catch(err) {
        alert("Action failed because unable to connect to server! Please try refreshing the page and trying again.");
        console.log("err was: " + err);
      }   
    }

    function errorMessageCallback(success, message) {
      if(success != true) {
        alert("Unable to complete operation due to error: " + message);
        location.reload(true);
        return;
      }
     now.IsHaystackUp(checkIfRestartNeeded); 
    }

    function checkIfRestartNeeded(haystackUp) {
      if (haystackUp) {
        var restartHaystack = confirm("You must restart the haystack for this to take effect. Restart it now?");
        if (restartHaystack) {
          now.StopHaystack();
          now.StartHaystack();
        }
      }

      location.reload(true);
    }

    function checkOnlyOne(checkedBox)
    {
      var forLength = document.getElementById("length").getAttribute("value");
      
      var checkAgainst = checkedBox.getAttribute("id");
      
      var checkedInterface = checkedBox.value;
      currentInterface = checkedBox.value;
      try {
          var ip = now.GetLocalIP(checkedInterface, UpdateIpField);
      } catch(err) {
        alert("Action failed because unable to connect to server! Please try refreshing the page and trying again.");
        console.log("err was: " + err);
      }   
      
      if(forLength == 1)
      {
        checkedBox.checked = true;
        return;
      }
      
      for(var i = 0; i < forLength; i++)
      {
        if(checkAgainst !== ("if" + i))
        {
          document.getElementById("if" + i).checked = false;
        }
      }
      
      if(!checkedBox.checked)
      {
        checkedBox.checked = true; 
      }
    }

    function UpdateIpField(ip) {
      if (ip != undefined) {
        var ipParts = ip.split(".");
        document.getElementById("ip1").value = ipParts[0];
        document.getElementById("ip2").value = ipParts[1];
        document.getElementById("ip3").value = ipParts[2];
        document.getElementById("ip4").value = ipParts[3];
      } else {
        document.getElementById("ip1").value = 0;
        document.getElementById("ip2").value = 0;
        document.getElementById("ip3").value = 0;
        document.getElementById("ip4").value = 0;
      }

    }

    function editSelectedItem() {
      var items = grid.selection.getSelected();
      if (items.length != 1)
      {
        var dialog = new dijit.Dialog({title: "Invalid Selection", content: "Please select only 1 node for editing"});
        dialog.show();
        return;
      }

      var nodeName = grid.store.getValues(items[0], "Name");

      if (nodeName == "Doppelganger") 
      {
        var dialog = new dijit.Dialog({title: "Invalid Selection", content: "The Doppelganger node can not be edited here"});
        dialog.show();
        return; 
      }
      window.location.href = "editHoneydNode?node=" + nodeName;
    }

    function changeGroup() {
        try {
           now.changeGroup(document.getElementById("GROUP").value, function() {
             window.location.reload();
           });
        } catch (err) {
            console.log(err);
            alert("ERROR: Unable to contact server!");
            return;
        }
    }
    
    function restoreDefaults() {
        try {
            now.restoreDefaultHaystackConfiguration(configurationRestored);
        } catch (err) {
            alert("Unable to contact server");
            console.log("Error was: " + err);
        }
    }

    function configurationRestored() {
        now.IsHaystackUp(checkIfRestartNeeded); 
    }


    require(["dojox/grid/DataGrid","dojo/data/ObjectStore","dojo/domReady!", "dojox/data/HtmlStore", "dijit/Dialog"],

    function(DataGrid,ObjectStore){
        var gridStore = new dojox.data.HtmlStore({dataId:"nodeTable"});
        var gridSize = #{nodes.length};
        grid = new dojox.grid.DataGrid({store:gridStore,structure:'layoutNodes',query:{},rowsPerPage:100, autoWidth:true});
        dojo.byId("gridDiv").appendChild(grid.domNode);
      now.ready(function() {
        checkOnlyOne(if0);
            
        var nodesPerProfile = new Object();
        var rows = document.getElementById("nodeTableBody").childNodes;
        var numberOfNodes = rows.length;
        for (var i = 0; i < rows.length; i++) {
          var pfile = rows[i].childNodes[2].innerHTML;
          if (nodesPerProfile[pfile] === undefined) {
            nodesPerProfile[pfile] = 1;
          } else {
            nodesPerProfile[pfile]++;
          }
        }

        var arr = new Array();
        for (var pfile in nodesPerProfile) {
            var p = new Object();
            p.name = pfile;
            p.value = nodesPerProfile[pfile];
            arr.push(p);
        }

        arr = arr.sort(function(a,b) {return b.value - a.value});
        console.log(arr);



        var canvas = document.getElementById("nodeDistribution");
        var ctx = canvas.getContext("2d");
        var lastend = 0;
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        for (var pfile = 0; pfile < arr.length; pfile++) {
            var randomColor = ((1<<24)*Math.random()|0).toString(16);
            if (randomColor.length != 6) {
                for (var i = randomColor.length; i < 6; i++) {
                    randomColor = "0" + randomColor;
                }
            }
            randomColor = "#" + randomColor;

            ctx.fillStyle = randomColor;
            ctx.beginPath();
            ctx.moveTo(150,150);
            ctx.arc(150,150,150,lastend,lastend+(Math.PI*2*(arr[pfile].value/numberOfNodes)),false);
            ctx.lineTo(150,150);
            ctx.fill();
            lastend += Math.PI*2*(arr[pfile].value/numberOfNodes);

            var text = document.createElement("p");
            text.innerHTML = "<span style='background-color: " + randomColor + ";'>&nbsp &nbsp &nbsp</span>&nbsp " +  (100*arr[pfile].value/numberOfNodes).toFixed(2) + "% " + arr[pfile].name;
            document.getElementById("piChartLegend").appendChild(text);

        }

        console.log(nodesPerProfile);
      });
    });

  script(type="text/javascript")
    /*set up data store*/
    var layoutNodes = [[
      { field: "Enabled", name: "Enabled", width: '100px' },
      { field: "Name", name: "Name", width: '400px' },
      { field: "Profile", name: "Profile", width: '100px' },
      { field: "IP", name: "IP", width: '150px' },
      { field: "MAC", name: "MAC", width: '150px' },
    ]];

block content
  h1 Current Haytack Node Configuration
  div#piChart
    div#chart
      canvas#nodeDistribution(width="300", height="300") Please upgrade to a browser that supports HTML5 canvas elements
    div#piChartLegend
  br
  label Group
    select#GROUP(name="GROUP", onchange="changeGroup()")
      each g, i in groups
        if g == currentGroup
          option(SELECTED) #{g}
        else
          option #{g}
  br
  table#nodeTable(style="display: none")
    thead
      tr
        th Enabled
        th Name
        th Profile
        th IP
        th MAC
    tbody#nodeTableBody
      each node, i in nodes
        tr
          td #{node.IsEnabled()}
          td #{node.GetName()}
          td #{node.GetProfile()}
          td #{node.GetIP()}
          td #{node.GetMAC()}
 
  div(style="height: 250px;")
    div#gridDiv(style="height: 250px")
 

  button(onClick="deleteSelectedItems()") Delete Selected Nodes 
  button(onClick="editSelectedItem()") Edit Selected Node

  br
  button(onClick="restoreDefaults()") Restore Default Configuration (will erase all changes!)
  br
  br
  h2 Create Honeyd Nodes
  label Profile
  select#profile(name="profile")
    each profile, i in profiles
      option #{profile}
  br

  label Number of nodes to create
  input#nodeCount(type="number", name="nodeCount", min="1", value="1")
  
  br
  label Network Interface
  table
    thead
      tr 
        th Interfaces
    tbody
    - if(INTERFACES.length == 1)
      tr 
        td
          input(type="checkbox", value=INTERFACES[0], id="if0", name="interface", width=10, checked, onclick="checkOnlyOne(if0)")
          #{INTERFACES[0]}
    - else
      tr 
        td
          input(type="checkbox", value=INTERFACES[0], id="if0", name="interface", width=10, checked, onclick="checkOnlyOne(if0)")
          #{INTERFACES[0]}
      - for (var i = 1; i < INTERFACES.length; i++)
          tr 
            td
              input(type="checkbox", value=INTERFACES[i], id="if#{i}", name="interface", width=10, onclick="checkOnlyOne(if#{i})")
              #{INTERFACES[i]}
  hidden(id="length", value=INTERFACES.length)
  br
  label IP Address Range Type
  select#ipType(name="ipType", onChange="ipTypeChanged()")
    option DHCP
    option IP Range

  br
  label Starting IP address
  input.ip#ip1(type="number", name="ip1", min="0", max="255", value="0", disabled="disabled")
  input.ip#ip2(type="number", name="ip2", min="0", max="255", value="0", disabled="disabled")
  input.ip#ip3(type="number", name="ip3", min="0", max="255", value="0", disabled="disabled")
  input.ip#ip4(type="number", name="ip4", min="0", max="255", value="0", disabled="disabled")
  
  br
  br
  input(type="Submit",value="Create New Nodes", onclick="createNodes()")
