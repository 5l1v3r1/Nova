extends layout

block headerAdditions
  link(rel="stylesheet", type="text/css", href="configstyle.css", media="screen")
  link(rel="stylesheet", type="text/css", href="novagrid.css", media="screen")
  script(type="text/javascript", src="scripts/NovaPiChart.js")
  script(type="text/javascript", src="scripts/NovaGrid.js")
  script(type="text/javascript", src="scripts/portset.js")

  script
    var grid;
    var currentInterface;
    var pfile;

    function createNodes() {
        document.getElementById("createNewNodes").disables = true;
        document.getElementById("createNewNodes").value = "Please wait. Creating new nodes...";
        var ipType = document.getElementById("ipType").value;
        var ip1 = document.getElementById("ip1").value;
        var ip2 = document.getElementById("ip2").value;
        var ip3 = document.getElementById("ip3").value;
        var ip4 = document.getElementById("ip4").value;
        var portset = document.getElementById("portSetList").value;
        var vendor = document.getElementById("vendorList").value;
        var profile = document.getElementById("profile").value;
        var count = document.getElementById("nodeCount").value;
        var interface = currentInterface;

        now.createHoneydNodes(ipType, ip1, ip2, ip3, ip4, profile, portset, vendor, interface, count, createNodesCallback);
    }
    
    function profileChanged() {
        now.GetProfile(document.getElementById("profile").value, populateVendorList);
    }
    
    function populateVendorList(profile) {
        pfile = profile;
        document.getElementById("vendorList").innerHTML = "";
        for (var vendor in profile.ethernet) {
            var v = profile.ethernet[vendor].vendor;
            var option = document.createElement('option');
            option.innerHTML = v;
            document.getElementById("vendorList").appendChild(option);
        }
        
        document.getElementById("portSetList").innerHTML = "";
        for (var portset in profile.portSets) {
            var v = profile.portSets[portset].setName;
            var option = document.createElement('option');
            option.innerHTML = v;
            document.getElementById("portSetList").appendChild(option);
        }

        portsetSelectionChanged();
    }
    
    function portsetSelectionChanged() {
        var portsetSelection = document.getElementById("portSetList");
        dojo.empty("portSetTable");
        var currentportset = portsetSelection.options[portsetSelection.selectedIndex].value;
        for (var i in pfile.portSets) {
            if (pfile.portSets[i].setName == currentportset) {
                generatePortSetTable(pfile.portSets[i], document.getElementById("portSetTable"));
                break;
            }
        }
    }

    function createNodesCallback(err) {
        if (err) {
            alert("Unable to create nodes due to error: " + err);
        } else {
            now.IsHaystackUp(checkIfRestartNeeded); 
        }
    }

    function checkIfRestartNeeded(haystackUp) {
      if (haystackUp) {
        var restartHaystack = confirm("You must restart the haystack for this to take effect. Restart it now?");
        if (restartHaystack) {
          now.RestartHaystack();
        }
      }
      location.reload(true);
    }
    
    function ipTypeChanged() {
      var ipEditEnabled;
      if (document.getElementById("ipType").value == "DHCP") {
        ipEditEnabled = true;
      } else {
        ipEditEnabled = false;
      }
      document.getElementById("ip1").disabled = ipEditEnabled;
      document.getElementById("ip2").disabled = ipEditEnabled;
      document.getElementById("ip3").disabled = ipEditEnabled;
      document.getElementById("ip4").disabled = ipEditEnabled;
     }
    
    function deleteSelectedItems() {
      var items = grid.GetSelected();
     
      for(var i in items)
      {
        grid.DeleteRow(items[i]);
      }
     
      try
      {
        now.deleteNodes(items, errorMessageCallback);
      }
      catch(err)
      {
        alert("Action failed because unable to connect to server! Please try refreshing the page and trying again.");
        console.log("err was: " + err);
      }   
      grid.Render();
    }

    function errorMessageCallback(success, message) {
      if(success != true) {
        alert("Unable to complete operation due to error: " + message);
        location.reload(true);
        return;
      }
      now.IsHaystackUp(checkIfRestartNeeded); 
    }

    function deleteAllNodes() {
      var gridElements = grid.GetElements();
      var passToDeleteNodes = [];
      
      for(var i in gridElements)
      {
        if(gridElements[i][1] !== 'Doppelganger')
        {
          passToDeleteNodes.push(gridElements[i][1]);
          grid.DeleteRow(gridElements[i][1]);
        }
      }
      try
      {
        now.deleteNodes(passToDeleteNodes, errorMessageCallback);
      }
      catch(err)
      {
        alert("Action failed because unable to connect to server! Please try refreshing the page and trying again.");
        console.log("err was: " + err);
      }
    }

    function checkOnlyOne(checkedBox)
    {
      var checkedBox = document.getElementById(checkedBox);
      var forLength = document.getElementById("length").getAttribute("value");
      
      var checkAgainst = checkedBox.getAttribute("id");
      
      var checkedInterface = checkedBox.value;
      currentInterface = checkedBox.value;
      try {
          var ip = now.GetLocalIP(checkedInterface, UpdateIpField);
      } catch(err) {
        alert("Action failed because unable to connect to server! Please try refreshing the page and trying again.");
        console.log("err was: " + err);
      }   
      
      if(forLength == 1)
      {
        checkedBox.checked = true;
        return;
      }
      
      for(var i = 0; i < forLength; i++)
      {
        if(checkAgainst !== ("if" + i))
        {
          document.getElementById("if" + i).checked = false;
        }
      }
      
      if(!checkedBox.checked)
      {
        checkedBox.checked = true; 
      }
    }

    function UpdateIpField(ip) {
      if (ip != undefined) {
        var ipParts = ip.split(".");
        document.getElementById("ip1").value = ipParts[0];
        document.getElementById("ip2").value = ipParts[1];
        document.getElementById("ip3").value = ipParts[2];
        document.getElementById("ip4").value = ipParts[3];
      } else {
        document.getElementById("ip1").value = 0;
        document.getElementById("ip2").value = 0;
        document.getElementById("ip3").value = 0;
        document.getElementById("ip4").value = 0;
      }

    }

    function editSelectedItem() {
      var items = grid.GetSelected();
      if (items.length != 1)
      {
        alert('You can only edit one node at a time');
        return;
      }

      var nodeName = items[0];

      if (nodeName == "Doppelganger") 
      {
        alert('The Doppelganger node can not be edited here');
        return; 
      }
      window.location.href = "editHoneydNode?node=" + nodeName;
    }

    function configurationRestored() {
        now.IsHaystackUp(checkIfRestartNeeded); 
    }
    
    function onGridRendered() {
       var gridSize = grid.GetNumberOfPages();
       var currentPage = grid.GetCurrentPage();

       var temp = document.createElement('a');
       document.getElementById("tablePages").innerHTML = "";

       var pageLink = document.createElement('a');
       pageLink.setAttribute('href', '#');
       pageLink.setAttribute('onclick', 'grid.PreviousPage();');
       var pageLinkText = document.createTextNode(" <-- ");
       pageLink.appendChild(pageLinkText);
       document.getElementById("tablePages").appendChild(pageLink);

       for (var i = 0; i < gridSize; i++) {
           var pageLink = document.createElement('a');
           pageLink.setAttribute('href', '#');
           pageLink.setAttribute('onclick', 'grid.SetCurrentPage( ' + i + ');');

           var pageLinkText = document.createTextNode(" " + (i + 1) + " ");
           pageLink.appendChild(pageLinkText);

           if (i == currentPage) 
           {
               var boldTag = document.createElement('b');
               boldTag.appendChild(pageLink);

               document.getElementById("tablePages").appendChild(boldTag);
           }
           else 
           {
               document.getElementById("tablePages").appendChild(pageLink);
           }    
       }

       var pageLink = document.createElement('a');
       pageLink.setAttribute('href', '#');
       pageLink.setAttribute('onclick', 'grid.NextPage();');
       var pageLinkText = document.createTextNode(" --> ");
       pageLink.appendChild(pageLinkText);
       document.getElementById("tablePages").appendChild(pageLink);
    }
    
    function deleteByProfile(profileName)
    {
      var gridElements = grid.GetElements();
      var passToDeleteNodes = [];
      for(var i in gridElements)
      {
        if(gridElements[i][2] === profileName)
        {
          passToDeleteNodes.push(gridElements[i][1]);
          grid.DeleteRow(gridElements[i][1]);
        }
      }
      try
      {
        now.deleteNodes(passToDeleteNodes, errorMessageCallback);
      }
      catch(err)
      {
        alert("Action failed because unable to connect to server! Please try refreshing the page and trying again.");
        console.log("err was: " + err);
      }
    }
    
    function Init()
    {
      var gridStructure = [];
      gridStructure.push({name: "Enabled"});
      gridStructure.push({name: "MAC"});
      gridStructure.push({name: "Profile"});
      gridStructure.push({name: "IP"});
      
      grid = new NovaGrid(gridStructure, 1, document.getElementById('nodeTable'), 'grid', true);
      
      grid.SetSortByKey(1);
      grid.SetRowsPerPage(50);
      grid.SetRenderCallback(onGridRendered);
      
      var nodeList = !{JSON.stringify(nodes)};
      var interfaces = !{JSON.stringify(INTERFACES)};
      var interfaceAliases = !{JSON.stringify(interfaceAliases)}

      for(var i in nodeList)
      {
        var row = [];
        row.push(String(nodeList[i].enabled));
        row.push(String(nodeList[i].mac));
        row.push(String(nodeList[i].pfile));

        if (nodeList[i].ip != "DHCP") 
        {
          row.push(String(nodeList[i].ip));
        } 
        else 
        {
          var alias = "";
          for (var j = 0; j < interfaces.length; j++) 
          {
            if (interfaces[j] == nodeList[i].interface) 
            {
              alias = interfaceAliases[j];
            }
          }

          if (alias != "" && alias != nodeList[i].interface) 
          {
            row.push("DHCP on " + nodeList[i].interface + " (alias: " + alias + ")"); 
          } 
          else 
          {
            row.push("DHCP on " + nodeList[i].interface); 
          }
        }
        grid.PushEntry(row);
      }
      
      grid.Render();
      
      var gridElements = grid.GetElements();
      
      var nodesPerProfile = {};
      var piChartRender = [];
      
      for(var i in gridElements)
      {
        var pfile = gridElements[i][2];
        if(nodesPerProfile[pfile] === undefined)
        {
          nodesPerProfile[pfile] = 1;
        }
        else
        {
          nodesPerProfile[pfile]++;
        }
      }
      
      for(var pfile in nodesPerProfile)
      {
        var p = {};
        p.name = pfile;
        p.value = nodesPerProfile[pfile];
        piChartRender.push(p);
      }
      
      var pi = new NovaPiChart('piChart', 200, 'deleteByProfile');
      pi.Render(piChartRender);
    }
    
    window.onload = function()
    {
      document.onselectstart = function()
      {
        return false;
      }
    }

    function init() {
      Init();
      checkOnlyOne('if0');
      profileChanged();
    }

block content
  h1 Current Haystack Node Configuration
  div#piChart
  br
  div#node_header
    br
    div#tablePages
    br
  table.novaGrid#nodeTable
  br
  br

  button(onclick="deleteSelectedItems()") Delete Selected Nodes
  button(onclick="deleteAllNodes()") Delete All Nodes 
  button(onclick="editSelectedItem()") Edit Selected Node

  br
  br
  a.button(href="/editHoneydNode?node=doppelganger") Edit Doppelganger
  br
  br
  h2 Create Honeyd Nodes
  label Profile
  select#profile(name="profile", onchange='profileChanged()')
    each profile, i in profiles
      option #{profile}
  br
  label Portset
  select#portSetList(name="profile", onchange='portsetSelectionChanged()')
  br
  div(style="margin-left: 300px")#portSetTable
  br
  
  label Ethernet Vendor
  select#vendorList(name"vendorList")
  br

  label Number of nodes to create
  input#nodeCount(type="number", name="nodeCount", min="1", value="1")
  
  br
  label Network Interface
  table
    thead
      tr 
    tbody
    - if(INTERFACES.length == 1)
      tr 
        td
          input(type="checkbox", value=INTERFACES[0], id="if0", name="interface", width=10, checked, onclick="checkOnlyOne('if0')")
          #{INTERFACES[0]} (Alias: #{interfaceAliases[0]})
    - else
      tr 
        td
          input(type="checkbox", value=INTERFACES[0], id="if0", name="interface", width=10, checked, onclick="checkOnlyOne('if0')")
          #{INTERFACES[0]} (Alias: #{interfaceAliases[0]})
      - for (var i = 1; i < INTERFACES.length; i++)
          tr 
            td
              input(type="checkbox", value=INTERFACES[i], id="if#{i}", name="interface", width=10, onclick="checkOnlyOne('if#{i}')")
              #{INTERFACES[i]} (Alias: #{interfaceAliases[i]})
  hidden(id="length", value=INTERFACES.length)
  br
  label IP Address Range Type
  select#ipType(name="ipType", onChange="ipTypeChanged()")
    option DHCP
    option IP Range

  br
  label Starting IP address
  input.ip#ip1(type="number", name="ip1", min="0", max="255", value="0", disabled="disabled")
  input.ip#ip2(type="number", name="ip2", min="0", max="255", value="0", disabled="disabled")
  input.ip#ip3(type="number", name="ip3", min="0", max="255", value="0", disabled="disabled")
  input.ip#ip4(type="number", name="ip4", min="0", max="255", value="0", disabled="disabled")
  
  br
  br
  input#createNewNodes(type="Submit",value="Create New Nodes", onclick="createNodes()")
