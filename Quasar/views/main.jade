extends layout

block topPannelAdditions
  div(style="float: left") Novad Status:&nbsp 
  div#nova_status unknown
  div(style="float: left") Haystack Status:&nbsp  
  div#haystack_status unknown

block content
  h1 Nova Control Panel
  button(type="button", style="width:160px", onClick='StartNovad()') Start Nova
  button(type="button", style="width:160px", onClick='StopNovad()') Stop Nova
  
  br
  br
  
  button(type="button", style="width:160px", onClick='StartHaystack()') Start Haystack
  button(type="button", style="width:160px", onClick='StopHaystack()') Stop Haystack
  
  br
  br
  
  button(type="button", style="width:160px", onClick='ClearAllSuspects(); suspectGrid.Clear();') Clear All Suspects

  br

  div#nova_suspects_header
    h1 Suspect List
    a(href="/novaState.csv") Get all suspects as a CSV file
    br
    br

    button#liveUpdateButton(data-dojo-type="dijit.form.Button",type="button") Pause Updates/Auto Scrolling
      script(type="dojo/method", data-dojo-event="onClick", data-dojo-args="evt")
        | liveUpdate = !liveUpdate;
        | if (!liveUpdate) {dojo.byId("liveUpdateButton").innerHTML = "Unpause table refreshing";}
        | else {dojo.byId("liveUpdateButton").innerHTML = "Pause table refreshing";}
    br
    br
    
    
    a(href="javascript:void(0)", onClick="document.getElementById('advancedFiltering').style.display='block';")
      p Advanced Filtering Options
    div#advancedFiltering(style="display: none;")
      br
      p Filter by IP (supports standard regular expressions. Example: "192\.168\.10\..*|192\.168\.3\..*")
      input#ipFilter(type="text", name="ipFilter", value="")
      br
      p Use 'x' in expressions to denote the specified feature value. Example: "x > 0 && x != 17"
      -var count = 0;
      each feature in featureNames
        if enabledFeatures.charAt(count) == '1'
          label #{feature}
          br
          input(type="text", id="advancedFilter#{count}")
          br
        - count++;
      br
      button(onClick='applyAdvancedFilter()') Apply Advanced Filters
      button(onClick='disableAdvancedFilter()') Disable Advanced Filters
    div#tablePages
    br

  div#nova_suspects
    table#suspectTable
  div(data-dojo-type="dijit.layout.ContentPane", title="Suspects", id="nova_suspects_error_view", style="display: none")
   h4 Novad is not currently connected or running. Try starting it.
   
block headerAdditions
  link(rel="stylesheet", type="text/css", href="novagrid.css", media="screen")
  script(type="text/javascript", src="scripts/NovaGrid.js")
  script
    // Performance boost accessing local var over document lookup
    var theDoc = document;

    var suspectGrid;
    var liveUpdate = true;
    var lastNovadStatus = "unknown";

    var advancedFilters = new Object();
    var advancedFilterEnabled = false;
    var advancedIpFilter = null;

    require(["dijit/form/TextBox"]);


    // Wrappers for now.js calls with some try/catches
    var StartNovad = function() {
        try {
            now.StartNovad();
          } catch(err) {
            alert("Action failed because unable to connect to server! Please try refreshing the page and trying again.");
            console.log("err was: " + err);
        } 
    }
    var StopNovad = function() {
        try {
            now.StopNovad();
          } catch(err) {
            alert("Action failed because unable to connect to server! Please try refreshing the page and trying again.");
            console.log("err was: " + err);
        } 
    }

    var StartHaystack = function() {
        try {
            now.StartHaystack();
          } catch(err) {
            alert("Action failed because unable to connect to server! Please try refreshing the page and trying again.");
            console.log("err was: " + err);
        } 
    }

    var StopHaystack = function() {
        try {
            now.StopHaystack();
          } catch(err) {
            alert("Action failed because unable to connect to server! Please try refreshing the page and trying again.");
            console.log("err was: " + err);
        } 
    }


    var ClearAllSuspects = function() {
        try {
            now.ClearAllSuspects();
          } catch(err) {
            alert("Action failed because unable to connect to server! Please try refreshing the page and trying again.");
            console.log("err was: " + err);
        } 
    }

    var updateNovadStatus = function (isNovadUp){
      if (lastNovadStatus == "unknown" || lastNovadStatus != isNovadUp) {
          lastNovadStatus = isNovadUp;
          dojo.byId("nova_status").innerHTML = isNovadUp ? "Up" : "Down";
          dojo.byId("eyeIcon").src = isNovadUp ? "/images/novaIconBlinking.gif" : "/images/novaIcon.png";
          dojo.byId("nova_suspects_header").style.display = isNovadUp ? "block" : "none";
          dojo.byId("nova_suspects").style.display = isNovadUp ? "block" : "none";
          dojo.byId("nova_suspects_error_view").style.display = isNovadUp ? "none" : "block";
      }
    };
    now.updateNovadStatus = updateNovadStatus;

    var updateHaystackStatus = function (isHaystackUp){
      dojo.byId("haystack_status").innerHTML = isHaystackUp ? "Up" : "Down";
    };
    now.updateHaystackStatus = updateHaystackStatus;

    now.AllSuspectsCleared = function() {
      suspectGrid.Clear();
    }
    
    now.SuspectCleared = function(suspect) {
        console.log("Cleared suspect ");
        console.log(suspect);
        suspectGrid.DeleteRow(suspect.GetIpString);
        suspectGrid.Render();
        return;
    }
      
    function pad(num) {
        return ("0" + num.toString()).slice(-2);
    }

    now.OnNewSuspect = function(suspect){
       var type = "#{type}";
      
       if (type == "hostile" && !suspect.GetIsHostile) {return;}
       if (type == "unclassified" && (suspect.GetClassification > 0)) {return;}
       if (type == "all" && suspect.GetClassification < 0) {return;}

       //if(!liveUpdate) {return;}
      
      var d = new Date(suspect.GetLastPacketTime*1000);
      var dString = pad(d.getMonth() + 1) + "/" + pad(d.getDate()) + " " + pad(d.getHours()) + ":" + pad(d.getMinutes()) + ":" + pad(d.getSeconds());
      suspect.LastPacketString = dString;
      
      var row = new Array();
      // This is probably a really bad way to do this...
      var clearButton = "<button onClick='now.ClearSuspect(";
      clearButton += '"' + suspect.GetIpString + '"';
      clearButton += "); suspectGrid.DeleteRow(";
      clearButton += '"' + suspect.GetIpString + '"';
      clearButton += ");'>Clear</button>";
      row.push(clearButton);

      var suspectLink = "<a href='/GetSuspectDetails?suspect=" + String(suspect.GetIpString) + "'> " + String(suspect.GetIpString) + "</a>";
      row.push(String(suspectLink));
      row.push(suspect.GetClassification);
      row.push(String(suspect.LastPacketString));
      row.push(String(suspect.GetIsHostile));
      var enabledFeatures = "#{enabledFeatures}";
      for (var i in suspect.GetFeatures) {  
        suspect[i] = suspect.GetFeatures[i];
        if (enabledFeatures.charAt(i) == "1") row.push(Number(suspect.GetFeatures[i])); 
      }
       
       if (advancedFilterEnabled) {
         for (var i in advancedFilters) {
             var x = String(suspect[i]);
             var expr = String(advancedFilters[i]);
             if (!eval(expr)) {
                return;
             }
         }

         if (advancedIpFilter != null) {
            if (!advancedIpFilter.test(suspect.GetIpString)) {
                return;
            }
         }
       }

        suspectGrid.PushEntry(row);
    };

    var applyAdvancedFilter = function() {
        var patt = new RegExp("^[1234567890x\. ()<>=!&|]+$");
        var featureNames = String("#{featureNames}").split(",");
        for (var i = 0; i < featureNames.length; i++) {
            var filter = "";
            var id = "advancedFilter" + String(i);
            var element = theDoc.getElementById(id);
            if (element != null) {
                filter = element.value;
            }

            if (filter == "") {
                continue;
            }

            if (!patt.test(filter)) {
                alert("Invalid filter: " + filter);
                return;
            } else {
                // Can we evaluate the expression?
                try {
                    var x = 2.5;
                    eval(filter);
                    advancedFilters[i] = filter;
                } catch (err) {
                    alert("Invalid filter: " + filter);
                    return;
                }
            }
        }

        var filter = theDoc.getElementById("ipFilter").value;
        if (filter != "") {
            try {
                advancedIpFilter = new RegExp(filter);
            } catch (err) {
                alert("Invalid filter: " + filter);
                return;
            }
        }

        advancedFilterEnabled = true;
        suspectGrid.Clear();
        try {
            now.sendAllSuspects(now.OnNewSuspect);
        } catch(err) {
            alert("Action failed because unable to connect to server! Please try refreshing the page and trying again.");
            console.log("err was: " + err);
        }   
    };

    var disableAdvancedFilter = function() {
        theDoc.getElementById('advancedFiltering').style.display='none';
        
        advancedFilterEnabled = false;
        var advancedFilters = new Object();
        
        suspectGrid.Clear();
        try {
            now.sendAllSuspects(now.OnNewSuspect);
        } catch(err) {
            alert("Action failed because unable to connect to server! Please try refreshing the page and trying again.");
            console.log("err was: " + err);
        }   
    }
              
    function featureFormatter(d) {
        var num = new Number(d);
        return (num.toFixed(2));
    }

    function classificationFormatter(d) {
        var num = 100 * d;
        if (num >= 0) {
            // Minor performance boost, don't bother with coloring those < than 5% hostile, barely shows anyway
            if (num > 5) {
                return '<div style="background: rgba(255, 0, 0, ' + d.toFixed(2) + ');">' + num.toFixed(2) + "%</div>";
            } else {
                return num.toFixed(2) + "%";
            }
        } else {
            if (num == -100) {
                return "Invalid";
            } else if (num == -200) {
                return "Not Enough Data";
            } else {
                return "Error";
            }

        }
    }

    function onGridRendered() {
       var gridSize = suspectGrid.GetNumberOfPages();
       var currentPage = suspectGrid.GetCurrentPage();

       var temp = document.createElement('a');
       document.getElementById("tablePages").innerHTML = "";

       var pageLink = document.createElement('a');
       pageLink.setAttribute('href', '#');
       pageLink.setAttribute('onclick', 'suspectGrid.PreviousPage();');
       var pageLinkText = document.createTextNode(" <-- ");
       pageLink.appendChild(pageLinkText);
       document.getElementById("tablePages").appendChild(pageLink);

       for (var i = 0; i < gridSize; i++) {
           var pageLink = document.createElement('a');
           pageLink.setAttribute('href', '#');
           pageLink.setAttribute('onclick', 'suspectGrid.SetCurrentPage( ' + i + ');');

           var pageLinkText = document.createTextNode(" " + (i + 1) + " ");
           pageLink.appendChild(pageLinkText);

           if (i == currentPage) {
               var boldTag = document.createElement('b');
               boldTag.appendChild(pageLink);

               document.getElementById("tablePages").appendChild(boldTag);
           } else {
               document.getElementById("tablePages").appendChild(pageLink);
           }    
       }

       var pageLink = document.createElement('a');
       pageLink.setAttribute('href', '#');
       pageLink.setAttribute('onclick', 'suspectGrid.NextPage();');
       var pageLinkText = document.createTextNode(" --> ");
       pageLink.appendChild(pageLinkText);
       document.getElementById("tablePages").appendChild(pageLink);
    }
    
    function Init() {
        theDoc = document;
        var enabledFeatures = "#{enabledFeatures}";
        var gridStructure = new Array();
        gridStructure.push({name: "Clear"});
        gridStructure.push({name: "Address"});
        gridStructure.push({name: "Classification", formatter: classificationFormatter});
        gridStructure.push({name: "Last Seen"});
        gridStructure.push({name: "Hostile"});
   
        var featureNames = String("#{featureNames}").split(",");
        for (var i = 0; i < featureNames.length; i++) {
            if (enabledFeatures.charAt(i) == "1") gridStructure.push({name:featureNames[i], formatter: featureFormatter});
        }
   
        suspectGrid = new NovaGrid(gridStructure, 1, document.getElementById('suspectTable'));

        // Sort by classification by default
        suspectGrid.SetSortByKey(2);
        suspectGrid.SetRowsPerPage(100);
        suspectGrid.SetRenderCallback(onGridRendered);

        try {
          now.sendAllSuspects(now.OnNewSuspect);
         } catch(err) {
           alert("Action failed because unable to connect to server! Please try refreshing the page and trying again.");
           console.log("err was: " + err);
         }   
    
    
        setInterval(function(){
            if(!liveUpdate || lastNovadStatus == false) {return;}
           
            var start = new Date().getTime();
            suspectGrid.Render(); 
            console.log("Time to render grid of size " + suspectGrid.Size() + ": " + (new Date().getTime() - start) + "ms");
        },3000);
    }

    require(["dojo/ready", "dojo/domReady!"], function(ready){
        ready(function() {
            now.ready(function() {
              Init();
              now.IsHaystackUp(updateHaystackStatus);
              now.IsNovadUp(updateNovadStatus);
            });
        });
    });


