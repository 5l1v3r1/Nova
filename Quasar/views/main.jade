extends layout

block topPannelAdditions
  table(style="float: left;")
    tr
      td(style="text-align: right;") Packet Classifier:&nbsp 
      td(style="padding: 0;")
        img#nova_status_icon(src="/images/orangedot.png", width="15px", height="15px")
      td
        div#nova_status checking
    tr
      td(style="text-align: right;") Haystack Status:&nbsp  
      td(style="padding: 0;")
        img#haystack_status_icon(src="/images/orangedot.png", width="15px", height="15px")
      td
        div#haystack_status checking
  button(type="button", style="width:160px; float: right; margin-right: 4px", onclick='StopNovad()') Stop Packet Classifier
  button(type="button", style="width:160px; float: right; margin-right: 4px", onclick='StartNovad()') Start Packet Classifier
  br
  br
  button(type="button", style="width:160px; float: right; margin-right: 4px", onclick='StopHaystack()') Stop Haystack 
  button(type="button", style="width:160px; float: right; margin-right: 4px", onclick='StartHaystack()') Start Haystack
  br
  br
  button(type="button", style="width:160px; float: right; margin-right: 4px", onclick='if(confirm("Are you sure you want to clear all gathered suspect data? This is irreversible.")){ClearAllSuspects(); suspectGrid.Clear()}else{return;}') Clear All Suspects

  a.button(style="margin-top: 2px; margin-bottom: 2px; margin-right: 4px; width:150px; float: right;", href="/novaState.csv") Suspects as CSV file

block content
  div#nova_suspects_header(style="width:600px;")
    br
    &nbsp
    
    a(class="button", href="javascript:void(0)", onclick="toggleFilterBlock()") Filtering Options
    br

    div#advancedFiltering(style="display: none;")
      br
      p Filter by IP (supports standard regular expressions. Example: "192\.168\.10\..*|192\.168\.3\..*")
      input#ipFilter(type="text", name="ipFilter", value="")
      br
      p Use 'x' in expressions to denote the specified feature value. Example: "x > 0 && x != 17"
      -var count = 0;
      each feature in featureNames
        if enabledFeatures.charAt(count) == '1'
          label #{feature}
          br
          input(type="text", id="advancedFilter#{count}")
          br
        - count++;
      br
      button(onclick='applyAdvancedFilter()') Apply Advanced Filters
      button(onclick='disableAdvancedFilter()') Disable Advanced Filters
    br
  div#nova_suspects
    
    input#liveGridUpdate(type="checkbox", checked, onchange="LiveUpdateChanged()")
    label Live Grid Update
    br
    
    input#showAdvanced(type="checkbox", onchange="showAdvancedChanged()")
    label Show Advanced Suspect Statistics
    br
    
    input#showUnclassified(type="checkbox", onchange="showUnclassifiedChanged()")
    label Show Unclassified Suspects
    br
    br
    div#tablePages(style="width: 100%;")
    br
    table.novaGrid#suspectTable
  div(data-dojo-type="dijit.layout.ContentPane", title="Suspects", id="nova_suspects_error_view", style="display: none; width: 600px; margin: 0 auto; text-align: center")
   h4 Novad is not currently connected or running. Try starting it.
   
block headerAdditions
  link(rel="stylesheet", type="text/css", href="novagrid.css", media="screen")
  script(type="text/javascript", src="scripts/NovaGrid.js")
  script
    // Performance boost accessing local var over document lookup
    var theDoc = document;

    var suspectGrid;
    var liveUpdate = true;
    var lastNovadStatus = "unknown";

    var advancedFilters = new Object();
    var advancedFilterEnabled = false;
    var advancedIpFilter = null;

    require(["dijit/form/TextBox"]);

    var LiveUpdateChanged = function() {
      liveUpdate = document.getElementById("liveGridUpdate").checked;
      console.log("Toggled live update to " + liveUpdate);
    }

    var toggleFilterBlock = function()
    {
      if(document.getElementById('advancedFiltering').style.display == 'none')
      {
        document.getElementById('advancedFiltering').style.display = 'block';  
      }
      else
      {
        document.getElementById('advancedFiltering').style.display = 'none'; 
      }
    }

    
    function showUnclassifiedChanged() {
        resendSuspects();

    }

    // Wrappers for now.js calls with some try/catches
    var StartNovad = function() {
        try {
            now.StartNovad();
          } catch(err) {
            alert("Action failed because unable to connect to server! Please try refreshing the page and trying again.");
            console.log("err was: " + err);
        } 
    }
    var StopNovad = function() {
        try {
            now.StopNovad();
          } catch(err) {
            alert("Action failed because unable to connect to server! Please try refreshing the page and trying again.");
            console.log("err was: " + err);
        } 
    }

    var StartHaystack = function() {
        try {
            now.StartHaystack();
          } catch(err) {
            alert("Action failed because unable to connect to server! Please try refreshing the page and trying again.");
            console.log("err was: " + err);
        } 
    }

    var StopHaystack = function() {
        try {
            now.StopHaystack();
          } catch(err) {
            alert("Action failed because unable to connect to server! Please try refreshing the page and trying again.");
            console.log("err was: " + err);
        } 
    }


    var ClearAllSuspects = function() {
        try {
            now.ClearAllSuspects();
          } catch(err) {
            alert("Action failed because unable to connect to server! Please try refreshing the page and trying again.");
            console.log("err was: " + err);
        } 
    }

    var updateNovadStatus = function (isNovadUp){
      if (lastNovadStatus == "unknown" || lastNovadStatus != isNovadUp) {
          lastNovadStatus = isNovadUp;
          dojo.byId("nova_status_icon").src = isNovadUp ? "/images/greendot.png" : "/images/reddot.png";;
          dojo.byId("nova_status").innerHTML = isNovadUp ? "Online" : "Offline";
          dojo.byId("eyeIcon").src = isNovadUp ? "/images/novaIconBlinking.gif" : "/images/novaIcon.png";
          dojo.byId("nova_suspects_header").style.display = isNovadUp ? "block" : "none";
          dojo.byId("nova_suspects").style.display = isNovadUp ? "block" : "none";
          dojo.byId("nova_suspects_error_view").style.display = isNovadUp ? "none" : "block";
      }
    };

    var updateHaystackStatus = function (isHaystackUp){
      dojo.byId("haystack_status_icon").src = isHaystackUp ? "/images/greendot.png" : "/images/reddot.png";;
      dojo.byId("haystack_status").innerHTML = isHaystackUp ? "Online" : "Offline";
    };
    
    var AllSuspectsCleared = function() {
      suspectGrid.Clear();
    }
    
    var SuspectCleared = function(suspect) {
        console.log("Cleared suspect ");
        console.log(suspect);
        suspectGrid.DeleteRow(buildLink(suspect.ip, suspect.interface));
        suspectGrid.Render();
        return;
    }
      
    function pad(num) {
        return ("0" + num.toString()).slice(-2);
    }
    
    function ClearSuspect(ip, interface, idString) {
        now.ClearSuspect(ip, interface);
        suspectGrid.DeleteRow(buildLink(ip, interface));
    }

    function MonitorSuspect(ip, interface, idString) {
        window.open("/monitor?ip=" + ip + "&interface=" + interface, 'Monitoring ' + ip);
    }

    function buildLink(ip, interface) {
      var res = "<a  href='javascript:void(0)' onclick='getSuspectDetails(";
      res += '"' + ip + '","' + interface + "\\")'> " + ip + "</a>";
      return res;
    }

    function getSuspectDetails(ip, interface) {
        window.open('/GetSuspectDetails?ip=' + ip + '&interface=' + interface, 'Details for suspect ' + ip);
    }
    
    var OnNewSuspect = function(suspect){
       if (!document.getElementById("showUnclassified").checked) {
         if (suspect.GetClassification < 0) {return;}
       }

       //if(!liveUpdate) {return;}
      
      var d = new Date(suspect.GetLastPacketTime*1000);
      var dString = pad(d.getMonth() + 1) + "/" + pad(d.getDate()) + " " + pad(d.getHours()) + ":" + pad(d.getMinutes()) + ":" + pad(d.getSeconds());
      suspect.LastPacketString = dString;
      
      var row = new Array();
      
      var monitorButton = "<a class='button' href='javascript:void(0)' onclick='MonitorSuspect(";
      monitorButton += '"' + suspect.GetIpString + '"' + ', ' + '"' + suspect.GetInterface + '"' + ', ' + '"' + suspect.GetIdString + '"';
      monitorButton += ");'>Monitor</a>";
      row.push(monitorButton);
        
      var ip = suspect.GetIpString;
    
      var suspectLink = buildLink(ip, suspect.GetInterface);
      row.push(String(suspect.interfaceAlias));
      row.push(String(suspectLink));
      row.push(suspect.GetClassification);
      row.push(String(suspect.LastPacketString));
      row.push(String(suspect.GetIsHostile));
      var enabledFeatures = "#{enabledFeatures}";
      for (var i in suspect.GetFeatures) {  
        suspect[i] = suspect.GetFeatures[i];
        if (enabledFeatures.charAt(i) == "1") row.push(Number(suspect.GetFeatures[i])); 
      }
       
       if (advancedFilterEnabled) {
         for (var i in advancedFilters) {
             var x = String(suspect[i]);
             var expr = String(advancedFilters[i]);
             if (!eval(expr)) {
                return;
             }
         }

         if (advancedIpFilter != null) {
            if (!advancedIpFilter.test(suspect.GetIdString)) {
                return;
            }
         }
       }
      
      var clearButton = "<button onclick='ClearSuspect(";
      clearButton += '"' + suspect.GetIpString + '"' + ', ' + '"' + suspect.GetInterface + '"' + ', ' + '"' + suspect.GetIdString + '"';
      clearButton += ");'>Clear</button>";
      row.push(clearButton);

      suspectGrid.PushEntry(row);
    };

    var applyAdvancedFilter = function() {
        var patt = new RegExp("^[1234567890x\. ()<>=!&|]+$");
        var featureNames = String("#{featureNames}").split(",");
        for (var i = 0; i < featureNames.length; i++) {
            var filter = "";
            var id = "advancedFilter" + String(i);
            var element = theDoc.getElementById(id);
            if (element != null) {
                filter = element.value;
            }

            if (filter == "") {
                continue;
            }

            if (!patt.test(filter)) {
                alert("Invalid filter: " + filter);
                return;
            } else {
                // Can we evaluate the expression?
                try {
                    var x = 2.5;
                    eval(filter);
                    advancedFilters[i] = filter;
                } catch (err) {
                    alert("Invalid filter: " + filter);
                    return;
                }
            }
        }

        var filter = theDoc.getElementById("ipFilter").value;
        if (filter != "") {
            try {
                advancedIpFilter = new RegExp(filter);
            } catch (err) {
                alert("Invalid filter: " + filter);
                return;
            }
        }

        advancedFilterEnabled = true;
        resendSuspects();
    };

    function resendSuspects() {
        suspectGrid.Clear();
        try {
            now.sendAllSuspects(OnNewSuspect);
        } catch(err) {
            alert("Action failed because unable to connect to server! Please try refreshing the page and trying again.");
            console.log("err was: " + err);
        }   
    }

    var disableAdvancedFilter = function() {
        theDoc.getElementById('advancedFiltering').style.display='none';
        
        advancedFilterEnabled = false;
        var advancedFilters = new Object();
        
        resendSuspects();
    }

    function showAdvancedChanged() {
        if (document.getElementById("showAdvanced").checked) {
            for (var i = 7; i < suspectGrid.m_columns.length - 1; i++) {
                suspectGrid.m_columns[i].isDisabled = false;
            }
        } else {
            for (var i = 7; i < suspectGrid.m_columns.length - 1; i++) {
                suspectGrid.m_columns[i].isDisabled = true;
            }
            
        }

        suspectGrid.GenerateTableHeader();
        suspectGrid.Render();
    }
              
    function featureFormatter(d) {
        var num = new Number(d);
        return (num.toFixed(2));
    }

    function classificationFormatter(d) {
        if (d === null) {
            return "NULL";
        } else if (d == -1) {
            return "Invalid";
        } else if (d == -2) {
            return "Not Enough Data";
        } else if (d >= 0 && d <= 1) {
            var num = 100 * d;
            // Minor performance boost, don not bother with coloring those < than 5% hostile, barely shows anyway
            if (num > 5) {
                return '<div style="background: rgba(255, 0, 0, ' + d.toFixed(2) + ');">' + num.toFixed(2) + "%</div>";
            } else {
                return num.toFixed(2) + "%";
            }
        } else {
             return "Error (" + d + ")";
        }
    }

    function onGridRendered() {
       var gridSize = suspectGrid.GetNumberOfPages();
       var currentPage = suspectGrid.GetCurrentPage();

       var temp = document.createElement('a');
       document.getElementById("tablePages").innerHTML = "";

       var pageLink = document.createElement('a');
       pageLink.setAttribute('href', '#');
       pageLink.setAttribute('onclick', 'suspectGrid.PreviousPage();');
       var pageLinkText = document.createTextNode(" <-- ");
       pageLink.appendChild(pageLinkText);
       document.getElementById("tablePages").appendChild(pageLink);

       for (var i = 0; i < gridSize; i++) {
           var pageLink = document.createElement('a');
           pageLink.setAttribute('href', '#');
           pageLink.setAttribute('onclick', 'suspectGrid.SetCurrentPage( ' + i + ');');

           var pageLinkText = document.createTextNode(" " + (i + 1) + " ");
           pageLink.appendChild(pageLinkText);

           if (i == currentPage) {
               var boldTag = document.createElement('b');
               boldTag.appendChild(pageLink);

               document.getElementById("tablePages").appendChild(boldTag);
           } else {
               document.getElementById("tablePages").appendChild(pageLink);
           }    
       }

       var pageLink = document.createElement('a');
       pageLink.setAttribute('href', '#');
       pageLink.setAttribute('onclick', 'suspectGrid.NextPage();');
       var pageLinkText = document.createTextNode(" --> ");
       pageLink.appendChild(pageLinkText);
       document.getElementById("tablePages").appendChild(pageLink);
    }
    
    function Init() {
        theDoc = document;
        var enabledFeatures = "#{enabledFeatures}";
        var gridStructure = [];
        gridStructure.push({name: "Monitor", isDisabled: false});
        gridStructure.push({name: "Interface", isDisabled: false});
        gridStructure.push({name: "Address", isDisabled: false});
        gridStructure.push({name: "Classification", isDisabled: false, formatter: classificationFormatter});
        gridStructure.push({name: "Last Seen", isDisabled: false});
        gridStructure.push({name: "Hostile", isDisabled: false});
   
        var featureNames = String("#{featureNames}").split(",");
        for (var i = 0; i < featureNames.length; i++) {
            if (enabledFeatures.charAt(i) == "1") gridStructure.push({name:featureNames[i], isDisabled: true, formatter: featureFormatter});
        }
        gridStructure.push({name: "Clear"});
   
        suspectGrid = new NovaGrid(gridStructure, 2, theDoc.getElementById('suspectTable'), 'suspectGrid', false);

        // Sort by classification by default
        suspectGrid.SetSortByKey(3);
        suspectGrid.SetRowsPerPage(20);
        suspectGrid.SetRenderCallback(onGridRendered);

        resendSuspects();

        setInterval(function(){
            if(!liveUpdate || lastNovadStatus == false) {return;}
           
            var start = new Date().getTime();
            suspectGrid.Render(); 
            console.log("Time to render grid of size " + suspectGrid.Size() + ": " + (new Date().getTime() - start) + "ms");
        },3000);
    }

    function init() {
        now.ready(function() {

            now.updateHaystackStatus = updateHaystackStatus;
            now.updateNovadStatus = updateNovadStatus;
            now.AllSuspectsCleared = AllSuspectsCleared;
            now.SuspectCleared = SuspectCleared;
            now.OnNewSuspect = OnNewSuspect;

            Init();
            
            now.IsHaystackUp(updateHaystackStatus);
            now.IsNovadUp(updateNovadStatus);
        });
    };

