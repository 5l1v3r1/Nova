doctype 5
html(lang="en")
  head
    meta(charset="utf-8")
    link(rel="stylesheet", type="text/css", href="style.css", media="screen")
    link(rel="stylesheet", type="text/css", href="/dojo/dijit/themes/claro/claro.css", media="screen")
    link(rel="shortcut icon", href="/favicon.ico")

    script(type="text/javascript", src="/nowjs/now.js")
    script(type="text/javascript", src="/dojo/dojo/dojo.js", data-dojo-config="async:true, parseOnLoad:true")
    script
      // This function should be replaced in other jade files, and will be called when the DOM is ready
      function init() {};

      // This function should be replaced
      function isNovadUpChanged(isNovadUp) {};

      var lastNovadStatus = "unknown";

      // Wrappers for now.js calls with some try/catches
      var StartNovad = function() {
          try {
              now.StartNovad();
            } catch(err) {
              alert("Action failed because unable to connect to server! Please try refreshing the page and trying again.");
              console.log("err was: " + err);
          } 
      }
      var StopNovad = function() {
          try {
              now.StopNovad();
            } catch(err) {
              alert("Action failed because unable to connect to server! Please try refreshing the page and trying again.");
              console.log("err was: " + err);
          } 
      }
  
      var StartHaystack = function() {
          try {
              now.StartHaystack();
            } catch(err) {
              alert("Action failed because unable to connect to server! Please try refreshing the page and trying again.");
              console.log("err was: " + err);
          } 
      }
  
      var StopHaystack = function() {
          try {
              now.StopHaystack();
            } catch(err) {
              alert("Action failed because unable to connect to server! Please try refreshing the page and trying again.");
              console.log("err was: " + err);
          } 
      }
  
      var updateNovadStatus = function (isNovadUp){
        if (lastNovadStatus == "unknown" || lastNovadStatus != isNovadUp) {
            lastNovadStatus = isNovadUp;

            document.getElementById("nova_status_icon_red").style.display = "none";
            document.getElementById("nova_status_icon_green").style.display = "none";
            document.getElementById("nova_status_icon_orange").style.display = "none";
            
            if (isNovadUp) {
              document.getElementById("nova_status_icon_green").style.display = "block";
            } else {
              document.getElementById("nova_status_icon_red").style.display = "block";
            }

            document.getElementById("nova_status").innerHTML = isNovadUp ? "Online" : "Offline";
            document.getElementById("eyeIcon").src = isNovadUp ? "/images/novaIconBlinking.gif" : "/images/novaIcon.png";
            isNovadUpChanged(isNovadUp);
        }
      };

      var updateHaystackStatus = function (isHaystackUp){
        document.getElementById("haystack_status_icon_red").style.display = "none";
        document.getElementById("haystack_status_icon_green").style.display = "none";
        document.getElementById("haystack_status_icon_orange").style.display = "none";
        
        if (isHaystackUp) {
          document.getElementById("haystack_status_icon_green").style.display = "block";
        } else {
          document.getElementById("haystack_status_icon_red").style.display = "block";
        }
        
        document.getElementById("haystack_status").innerHTML = isHaystackUp ? "Online" : "Offline";
      };
    
    block headerAdditions

    script
      require(["dijit/layout/BorderContainer", "dijit/layout/TabContainer", "dijit/layout/ContentPane", "dijit/form/Button", "dojo/parser", "dojo/domReady!", "dojo"],
        function(){
          dojo.addOnLoad(function(){
            // Some logging of nowjs stuff
            now.core.on('disconnect', function() {console.log('Warning: Disconnected from nowjs server.');});
            
            dojo.style("appLayout", "opacity", 0);
            dojo.fadeOut({node:"splash", delay:0}).play();
            dojo.style("appLayout", "visibility", "visible");
            dojo.fadeIn({node:"appLayout", delay:0}).play();

            var sideBarButtons = document.getElementsByClassName("sideBarButton");
            for (var i in sideBarButtons) {
                if (!sideBarButtons[i].pathname) {
                    continue;
                }
                
                if (sideBarButtons[i].pathname == window.location.pathname) {
                    sideBarButtons[i].className += ' active';
                    console.log("Enabled button " + sideBarButtons[i]);
                }
            }
          });

          now.ready(function() {
            now.updateHaystackStatus = updateHaystackStatus;
            now.updateNovadStatus = updateNovadStatus;
            now.IsHaystackUp(updateHaystackStatus);
            now.IsNovadUp(updateNovadStatus);
          });


          init();
        }
      );

  body.claro
    div#splash(style="position:absolute;left:0px;top:0px;width:100%;height:100%; text-align: center;")
    div#appLayout.demoLayout(data-dojo-type="dijit.layout.BorderContainer", data-dojo-props="design: 'headline', region: 'center'", style="visibility: hidden")
      div.centerPanel(data-dojo-type="dijit.layout.ContentPane", data-dojo-props="region: 'center', tabPosition: 'bottom'")
        div(data-dojo-type="dijit.layout.ContentPane",title="Nova", data-dojo-props="splitter: false")
          block content
      // Header panel
      div.edgePanel(data-dojo-type="dijit.layout.ContentPane", data-dojo-props="region: 'top', splitter: false", style="padding: 2px 2px 2px 2px")
        div(data-dojo-type="dijit.layout.BorderContainer",data-dojo-props="design: 'sidebar', splitter: false",style="height: 140px;")
          // Header center
          div(data-dojo-type="dijit.layout.ContentPane", data-dojo-props="region: 'center', splitter: false", style="padding: 2px 2px 2px 2px")    
            a(href="/")
              img#eyeIcon(src="images/novaIcon.png",class="align-left", width="100px", height="100px")
              h1(style="margin-top: 6px; margin-bottom: 6px") DataSoft Nova Anti-reconnaissance System
            block topPannelAdditions
            
            // This is so the browser will cache all 3 pics when it first loads
            
            table(style="float: left;")
              tr
                td(style="text-align: right;") Packet Classifier:&nbsp 
                td(style="padding: 0;")
                  img#nova_status_icon_orange(src="/images/orangedot.png", width="15px", height="15px")
                  img#nova_status_icon_red(src="/images/reddot.png", width="15px", height="15px", style="display: none;")
                  img#nova_status_icon_green(src="/images/greendot.png", width="15px", height="15px", style="display: none;")
                td
                  div#nova_status checking
              tr
                td(style="text-align: right;") Haystack Status:&nbsp  
                td(style="padding: 0;")
                  img#haystack_status_icon_orange(src="/images/orangedot.png", width="15px", height="15px")
                  img#haystack_status_icon_red(src="/images/reddot.png", width="15px", height="15px", style="display: none;")
                  img#haystack_status_icon_green(src="/images/greendot.png", width="15px", height="15px", style="display: none;")
                td
                  div#haystack_status checking
            table(style="float: right;")
              tr
                td
                  button(type="button", style="width:160px; float: right; margin-right: 4px", onclick='StartNovad()') Start Packet Classifier
                td
                  button(type="button", style="width:160px; float: right; margin-right: 4px", onclick='StopNovad()') Stop Packet Classifier
              tr
                td
                  button(type="button", style="width:160px; float: right; margin-right: 4px", onclick='StartHaystack()') Start Haystack
                td
                  button(type="button", style="width:160px; float: right; margin-right: 4px", onclick='StopHaystack()') Stop Haystack 
            br
    
      // Left panel
      div#leftCol.edgePanel(data-dojo-type="dijit.layout.ContentPane", data-dojo-props="region: 'left', splitter: false")
        block buttonPannelAdditions
      
       
        div.sideBarHeader Status
          a.sideBarButton(href='/suspects') Packet Classifier
        
        div.sideBarHeader Logs
          a.sideBarButton(href='/events') Hostile Events
          a.sideBarButton(href= "/viewNovadLog") Nova Log
          a.sideBarButton(href= "/viewHoneydLog") Haystack Log
         
        div.sideBarHeader Configuration
          a.sideBarButton(href= "/honeydConfigManage") Haystack Settings
          a.sideBarButton(href= "/basicOptions") Basic Options
          a.sideBarButton(href= "/advancedOptions") Advanced Options
          a.sideBarButton(href= "/customizeTraining") Classification Training
          a.sideBarButton(href= "/interfaceAliases") Interface Aliases
          a.sideBarButton(href= "/configWhitelist") Whitelist
       
        div.sideBarHeader Users
          a.sideBarButton(href= "/createNewUser") New User
          a.sideBarButton(href= "/editUsers") Edit User
        
        div.sideBarHeader Documentation
          a.sideBarButton(href='/about') About
        
