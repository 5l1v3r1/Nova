#!/bin/bash
if [[ $# -lt "1" ]]
then
	echo "usage: bash NovaCron username [-u (pipe_absolute_path | null) (email_absolute_path | null) | -d]"
	exit 1;
fi

if [[ $2 -eq "-d" && $# -eq "2" ]]
then
{
	user=$1
	pickApart=cronChange.tmp
	crontab -u $user -l >$pickApart
	cronWithoutNova=cronInput.tmp	

	while read line
	do
	{
		if [[ $line =~ [\*\/0-9]*" bash /usr/bin/nova_mailer" ]]
		then
		{
			continue	
		}
		else
		{
			echo "$line" >> $cronWithoutNova
		}
		fi
	}
	done <$pickApart

	crontab -u $user $cronWithoutNova
	rm $pickApart
	rm $cronWithoutNova
	exit 1;
}
fi

if [[ $2 -eq "-u" && $# -eq "4" ]]
then
{
	pipe=$3
	recipients=$4
}
fi

#create a temp file to hold the current crontab entry; it will stay in the
# folder until the cron entry for Nova's mail script is removed; at that point
# it can be restored. Possibly used for a comparison in later versions of this 
# part of the scripting process; may use it as a template to check against to
# ensure that the right lines were erased.
tmpfile=cron.tmp

#command to dump current crontab contents into the tmpfile file
crontab -u $1 -l >$tmpfile.original

#check to make sure that there isn't already a nova_mailer cron job set up;
# if it's different, make the changes, if it's not, don't bother.

REGEX=[\*\/0-9]*" /usr/bin/nova_maile"
ADDLINE="0"

while read line
do
{
	if [[ $line =~ $REGEX ]]
	then
	{
		ADDLINE="1"
		if [[ $2 -eq "-u" && $# -eq "4" ]]
		then	
		{	
			echo "Update requested, not including previous job in new file"
		}
		else
		{
			echo "$line" >> $tmpfile
		}
		fi
	}
	else
	{
		echo "$line" >> $tmpfile
	}
	fi
}
done <$tmpfile.original

#echos to add the requisite lines to the future crontab to allow the script 
# for mail alerts to be run, and run through bash (needed for the [[ and ]]
# comparison operators; used them for regex stuff)
if [[ $2 -eq "-u" && $# -eq "4"  ]]
then
{
	echo "*/1 * * * * bash /usr/bin/nova_mailer "$pipe $recipients" >/dev/null 2>&1" >> $tmpfile	
}
elif [[ $ADDLINE -eq "0" ]]
then
{
	echo "*/1 * * * * bash /usr/bin/nova_mailer >/dev/null 2>&1" >> $tmpfile
}
else
{
	echo "Nova mail cron job present, no update requested. No action taken."	
	exit 1;
}
fi

#makes the tmpfile the new crontab; the call to crontab makes cron 
# automagically conform to the new crontab directives, so no need for a 
# restart or anything.
if [[ $ADDLINE -eq "0" || $2 -eq "-u" ]]
then
{
	crontab -u $1 $tmpfile
}
fi

#get rid of the modified crontab; already where it needs to be
rm $tmpfile
rm $tmpfile.original
