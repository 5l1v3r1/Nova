extends layout


block headerAdditions
  //link(rel="stylesheet", type="text/css", href="configstyle.css", media="screen")
  script
    var profile;
    var portList = new function() {};
    var newProfile = "#{newProfile}";
    
    var currentName;
    if (newProfile == "true") {
        currentName = "#{parentName}";
        console.log("Creating child of profile " + currentName);
    } else {
        currentName = "#{oldName}";
        console.log("Editing profile " + currentName);
    }

    var inheritanceChanged = function() {};
    var uptimeTypeChanged = function() {};
    var portInheritedChange = function(portUID) {};
    var deletePort = function() {};
    var addPort = function(port) {};
    var portBehaviorChanged = function() {};
    var saveChanges = function() {};
    var savedChanges = function() {};
    var sliderMoved = function(which) {};

    var portIndexes = [];
    var loaded = false;


    function selectItemByValue(elmnt, value) {
      for(var i=0; i < elmnt.options.length; i++) {
        if(elmnt.options[i].value == value) {
          elmnt.selectedIndex = i;
        }
      }
    }

    require(["dojo/domReady!", "dojo/ready", "dijit/form/FilteringSelect"], function() {
    
    // TODO
    if (newProfile != "true") {
        dojo.byId("saveButton").disabled = true;
    }

    sliderMoved = function(which, len) {
        var valueToReplace = document.getElementById(which).value;

        dojo.byId("distLabel" + which[which.length - 1]).innerHTML = valueToReplace;
        dojo.byId("distLabel" + which[which.length - 1]).setAttribute("value", valueToReplace);
        dojo.byId(which).setAttribute("value", valueToReplace);
        
        var reduction = 0;
        
        for(var i = 0; i < len; i++)
        {
            reduction += parseInt(dojo.byId(which.substr(0, which.length - 1) + i).value);
        }
        
        reduction -= 100;
        
        var sumOfOtherElements = 0;
        
        var sumOfHiddens = 0;
        
        var problems = [];
        
        var newValues = new Array();
        
        for(var i = 0; i < len; i++)
        {
            if(dojo.byId("dist" + i) !== dojo.byId(which))
            {
                sumOfOtherElements += parseInt(dojo.byId("distLabel" + i).value);
                sumOfHiddens += parseInt(dojo.byId("hide" + i).getAttribute("value"));
                
                if(parseInt(dojo.byId("distLabel" + i).value) == 0 || isNaN(sumOfOtherElements))
                {
                    problems = true;
                }
                else
                {
                    problems = false;
                }
            }
        }
        
        for(var i = 0; i < len; i++)
        {
            if(dojo.byId("dist" + i) !== dojo.byId(which) && (!isNaN(sumOfOtherElements) && !problems))
            {
                var mult = (parseInt(dojo.byId("distLabel" + i).value) / sumOfOtherElements);
                newValues.push(reduction * mult);
            }
            else if(dojo.byId("dist" + i) !== dojo.byId(which) && (isNaN(sumOfOtherElements) || problems))
            {
                var mult = (parseInt(dojo.byId("hide" + i).getAttribute("value"))/sumOfHiddens);
                newValues.push(reduction * mult);
            }
        }
        
        var max = 0;
        
        for(var i = 0; i < newValues.length - 1; i++)
        {
            var roundingVal = newValues[i] + 0.5;
            
            if(Math.floor(roundingVal) == Math.floor(newValues[i]))
            {
                newValues[i] = Math.floor(roundingVal);
                newValues[i + 1] += roundingVal % 1;
            }
            else
            {
                newValues[i] = Math.floor(roundingVal);
                newValues[i + 1] -= roundingVal % 1;
            }
            
            max += (newValues[i] / 1);
        }
        
        newValues[newValues.length - 1] = reduction - max;
        
        var j = 0;
        
        for(var i = 0; i < len; i++)
        {
            if(dojo.byId("dist" + i) !== dojo.byId(which) && !problems)
            {
                document.getElementById("dist" + i).value = document.getElementById("distLabel" + i).getAttribute("value") - newValues[j];
                document.getElementById("distLabel" + i).innerHTML = document.getElementById("distLabel" + i).getAttribute("value") - newValues[j];
                document.getElementById("distLabel" + i).setAttribute("value", document.getElementById("distLabel" + i).getAttribute("value") - newValues[j]);
                j++;
            }
            else if(dojo.byId("dist" + i) !== dojo.byId(which) && problems && reduction < 0)
            {
                document.getElementById("dist" + i).value = 0 - newValues[j];
                document.getElementById("distLabel" + i).innerHTML = 0 - newValues[j];
                document.getElementById("distLabel" + i).setAttribute("value", 0 - newValues[j]);
                j++;
            }
            else if(dojo.byId("dist" + i) !== dojo.byId(which) && problems && reduction > 0)
            {
                document.getElementById("dist" + i).value = 0 + newValues[j];
                document.getElementById("distLabel" + i).innerHTML = 0 + newValues[j];
                document.getElementById("distLabel" + i).setAttribute("value", 0 + newValues[j]);
                j++;
            }
        }
    }
 
    function obj() {};
    saveChanges = function() {
        var pfile = new obj();
        var ports = new obj();
        
        pfile.oldName = "#{oldName}";
        pfile.parentProfile = dojo.byId("parentName").value;
        pfile.name = dojo.byId("name").value;
        pfile.tcpAction = dojo.byId("tcpAction").value;
        pfile.udpAction = dojo.byId("udpAction").value;
        pfile.icmpAction = dojo.byId("icmpAction").value;
        pfile.personality = dojo.byId("personality").value;
        pfile.ethernet = dojo.byId("ethernet").value;
        pfile.dropRate = dojo.byId("dropRate").value;
        pfile.uptimeMin = dojo.byId("uptimeMin").value;

        if (dojo.byId("uptimeType").selectedIndex == 0) {
            pfile.uptimeMin = dojo.byId("uptimeMin").value;
        } else {
            pfile.uptimeMin = dojo.byId("uptimeMin").value;
        }


        pfile.isPersonalityInherited = dojo.byId("inheritPersonality").checked;
        pfile.isEthernetInherited = dojo.byId("inheritEthernet").checked;
        pfile.isDropRateInherited = dojo.byId("inheritDropRate").checked;
        pfile.isUptimeInherited = dojo.byId("inheritUptime").checked;
        pfile.isTcpActionInherited = dojo.byId("inheritTcpAction").checked;
        pfile.isUdpActionInherited = dojo.byId("inheritUdpAction").checked;
        pfile.isIcmpActionInherited = dojo.byId("inheritIcmpAction").checked;

        ports.size = portIndexes.length;
        for (var i = 0; i < portIndexes.length; i++) {
            ports[i] = new obj();
            ports[i].portNum = dojo.byId("portNum" + portIndexes[i]).value;
            ports[i].behavior = dojo.byId("portBehavior" + portIndexes[i]).value;
            ports[i].type = dojo.byId("portType" + portIndexes[i]).value;
            ports[i].script = dojo.byId("portScriptDrop" + portIndexes[i]).value;
            ports[i].isInherited = dojo.byId("portInherited" + portIndexes[i]).checked;
        }

        now.SaveProfile(pfile, ports, savedChanges);
    }

    savedChanges = function() {
        window.location="configHoneydProfiles";
    }

    addPort = function(port) {
        if (port == undefined) {
            port = function() {};
            port.portNum = 0;
            port.type = "TCP";
            port.behavior = "open";
            port.isInherited = false;
            port.scriptName = "NA";
        }

        var portDiv = dojo.byId("portTable");
        var portUID;

        if (portIndexes.length > 0) {
            portUID = portIndexes[portIndexes.length - 1] + 1;
        } else {
            portUID = 0;
        }
        
        portIndexes.push(portUID);

        var row = "<tr id='portRow" + portUID + "'>";

        if (!port.isInherited) {
            row += "<td><input disabled='true' type='checkbox' id='portInherited" + portUID + "'> Inherited? </td>";
            row += "<td><input id='portNum" + portUID + "' type='number' min=1 max=65535 value=" + port.portNum + "> </td>";
            row += "<td><select id ='portType";
        } else {
            row += "<td><input type='checkbox' id='portInherited" + portUID + "' onchange='portInheritedChange(" + portUID + ")' CHECKED> Inherited? </td>";
            row += "<td><input id='portNum" + portUID + "' type='number' disabled='true' min=1 max=65535 value=" + port.portNum + "> </td>";
            row += "<td><select disabled='true' id ='portType";
        }
       
        row += portUID;
        row += "'>";
        options = ["UDP", "TCP"];
        for (j = 0; j < options.length; j++) {
            if (port.type == options[j]) {
                row += "<option value='" + j + "' SELECTED>" + options[j] + "</option>";
            } else {
                row += "<option value='" + j + "'>" + options[j] + "</option>";
            }
        }
        row += "</select></td>";

        row += "<td><select onchange='portBehaviorChanged()' id='portBehavior" + portUID + "'>"; 
        options = ["closed", "reset", "open", "script"];
        for (j = 0; j < options.length; j++) {
            if (port.behavior == options[j]) {
                row += "<option value='" + j + "' SELECTED>" + options[j] + "</option>";
            } else {
                row += "<option value='" + j + "'>" + options[j] + "</option>";
            }
        }
        row += "</select></td>";
        


        row += "<td><select id='portScriptDrop";
        row += portUID;
        row += "'>"; 
        var scripts = "#{scripts}";
        options = scripts.split(",");
        matchingScriptFound = false;
        for (j = 0; j < options.length; j++) {
            if (port.scriptName == options[j]) {
                row += "<option SELECTED>" + options[j] + "</option>";
                matchingScriptFound = true;
            } else {
                row += "<option>" + options[j] + "</option>";
            }
        }

        // Have a blank option if no script is selected
        if (!matchingScriptFound) {
            row += "<option disabled='true' SELECTED>NA</option>";
        } else {
            row += "<option disabled='true'>NA</option>";
        }
        row += "</td></select>"; 


        // Delete button 
        if (port.isInherited) {
          row += "<td><button type='button' disabled = 'true'/> Inherited </td>";
        } else {
          row += "<td><button type='button' onClick='deletePort(" + portUID + ")'/> Delete </td>";
        }
 
        row += "</tr>";

        dojo.byId("portTable").innerHTML += row;

        portBehaviorChanged();
        portInheritedChange(portUID);
    }
    
    // Disable editing if inherited
    portInheritedChange = function(portUID) {
        if (dojo.byId("portInherited" + portUID).checked) {
            dojo.byId("portBehavior" + portUID).disabled = true;
            dojo.byId("portScriptDrop" + portUID).disabled = true;

            var behavior = portList[Number(dojo.byId("portNum" + portUID).value)].behavior;
            
            selectItemByValue(dojo.byId("portScriptDrop" + portUID), "NA");

            if (behavior == "closed") {
                dojo.byId("portBehavior" + portUID).value = 0;
            } else if (behavior == "reset") {
                dojo.byId("portBehavior" + portUID).value = 1;
            } else if (behavior == "open") {
                dojo.byId("portBehavior" + portUID).value = 2;
            } else if (behavior == "script") {
                dojo.byId("portBehavior" + portUID).value = 3;
                selectItemByValue(dojo.byId("portScriptDrop" + portUID), portList[Number(dojo.byId("portNum" + portUID).value)].scriptName);
            }

            
        } else {
            dojo.byId("portBehavior" + portUID).disabled = false;
            portBehaviorChanged(); 
        }
    }

    uptimeTypeChanged = function() {
        if (dojo.byId("uptimeType").selectedIndex == 0) {
            dojo.byId("uptimeMax").style.display = "none";
            document.getElementById("uptimeLabel").innerHTML = "Uptime";
        } else {
            dojo.byId("uptimeMax").style.display = "block"; 
            document.getElementById("uptimeLabel").innerHTML = "Uptime Range";
        }
    }

    portBehaviorChanged = function() {
        for (var i = 0; i < portIndexes.length; i++) {
            if (dojo.byId("portBehavior" + portIndexes[i]).value == "3") {
                if (!dojo.byId("portInherited" + portIndexes[i]).checked) {
                    dojo.byId("portScriptDrop" + portIndexes[i]).disabled = false;
                }
            } else {
                dojo.byId("portScriptDrop" + portIndexes[i]).disabled = true;
            }
        }
    }

    deletePort = function(portUID) {
        var row = dojo.byId("portRow" + portUID);
        row.parentNode.removeChild(row);
        var idx = portIndexes.indexOf(portUID);
        if (idx != -1) {
            portIndexes.splice(idx, 1);
        }
    }
    
    inheritanceChanged = function() {
        if (dojo.byId("personality").disabled = dojo.byId("inheritPersonality").checked) {
            dojo.byId("personality").value = profile.personality;
            dijit.byId("personality").setDisabled(true);
        } else {
            dijit.byId("personality").setDisabled(false);
        }

        if (dojo.byId("ethernet").disabled = dojo.byId("inheritEthernet").checked) 
        {
            dojo.byId("ethernet").value = profile.ethernet;
            dijit.byId("ethernet").setDisabled(true);
            
            now.GetInheritedEthernetList(document.getElementById("parentName").value, 
            function(elements, distributions){
                document.getElementById("ethVendorLength").setAttribute("value", elements.length);

                for(var i in elements)
                {
                    var hidden = document.createElement("hidden");
                    
                    hidden.setAttribute("id", "hide" + i);
                    hidden.setAttribute("value", distributions[i]);
                
                    var add = document.createElement("input");
                    
                    add.setAttribute("id","vend" + i);
                    add.setAttribute("value",elements[i]);
                    add.setAttribute("type", "text");
                    add.setAttribute("readonly","true");
                    add.innerHTML = elements[i];
                    
                    var distribution = document.createElement("input");
                    
                    distribution.setAttribute("id", "dist" + i);
                    distribution.setAttribute("type", "range");
                    distribution.setAttribute("min", "0");                    
                    distribution.setAttribute("max", "100");
                    distribution.setAttribute("step", "1");
                    distribution.setAttribute("value", distributions[i]);
                    distribution.setAttribute("onchange", 'sliderMoved("dist' + i + '", ' + elements.length + ')');
                    
                    var distLabel = document.createElement("input");
                    
                    distLabel.setAttribute("id","distLabel" + i);
                    distLabel.setAttribute("value", distributions[i]);
                    distLabel.setAttribute("type", "text");
                    distLabel.setAttribute("readonly","true");
                    distLabel.innerHTML = distributions[i];
                    
                    var teed = document.createElement("td");
                    var teer = document.createElement("tr");
                    
                    teer.setAttribute("id", "ethrow" + i);
                    teed.appendChild(add);
                    teed.appendChild(distribution);
                    teed.appendChild(distLabel);
                    teed.appendChild(hidden);
                    teer.appendChild(teed);
                    
                    for(var j in document.getElementById("tableEditProfile").childNodes)
                    {
                        if(document.getElementById("tableEditProfile").childNodes[j].tagName == "TBODY")
                        {
                            document.getElementById("tableEditProfile").childNodes[j].insertBefore(teer, document.getElementById("row4"));
                            break;
                        }
                    }
                }
            });     
        }
        else 
        {
            dijit.byId("ethernet").setDisabled(false);
            var deletes = document.getElementById("tableEditProfile");
            
            for(var i in deletes.childNodes)
            {
                if(deletes.childNodes[i].tagName == "TBODY")
                {
                    var tbodyLength = deletes.childNodes[i].childNodes.length;
                    
                    for(var j = 0; j < tbodyLength; j++)
                    {
                        if(deletes.childNodes[i].childNodes[j].tagName == "TR")
                        {
                            var idLength = deletes.childNodes[i].childNodes[j].id.length;

                            if(deletes.childNodes[i].childNodes[j].id.substr(0, idLength - 1) == "ethrow")
                            {
                                deletes.childNodes[i].removeChild(deletes.childNodes[i].childNodes[j]);
                                j--;
                            }
                        }
                    }
                }
            }
        }

        if (dojo.byId("dropRate").disabled = dojo.byId("inheritDropRate").checked) {
            dojo.byId("dropRate").value = profile.dropRate;
        }
        
        if (dojo.byId("uptimeMin").disabled = dojo.byId("inheritUptime").checked) {
            dojo.byId("uptimeMin").value = profile.uptimeMin;
        }

        if (dojo.byId("uptimeMax").disabled = dojo.byId("inheritUptime").checked) {
            dojo.byId("uptimeMax").value = profile.uptimeMax;
        }

        if (dojo.byId("uptimeType").disabled = dojo.byId("inheritUptime").checked) {
            if (profile.uptimeMin == profile.uptimeMax) {
               dojo.byId("uptimeType").selectedIndex = 0;
            } else {
               dojo.byId("uptimeType").selectedIndex = 1; 
            }
        }
        
        if (dojo.byId("tcpAction").disabled = dojo.byId("inheritTcpAction").checked) {
            if (profile.tcpAction == "reset") {
                dojo.byId("tcpAction").selectedIndex = 0;
            } else if (profile.tcpAction == "block") {
                dojo.byId("tcpAction").selectedIndex = 1;
            } else if (profile.tcpAction == "open") {
                dojo.byId("tcpAction").selectedIndex = 2;
            }
        }
        
        if (dojo.byId("udpAction").disabled = dojo.byId("inheritUdpAction").checked) {
            if (profile.udpAction == "reset") {
                dojo.byId("udpAction").selectedIndex = 0;
            } else if (profile.udpAction == "block") {
                dojo.byId("udpAction").selectedIndex = 1;
            } else if (profile.udpAction == "open") {
                dojo.byId("udpAction").selectedIndex = 2;
            }
        }
        
        if (dojo.byId("icmpAction").disabled = dojo.byId("inheritIcmpAction").checked) {
            if (profile.icmpAction == "reset") {
                dojo.byId("icmpAction").selectedIndex = 0;
            } else if (profile.icmpAction == "block") {
                dojo.byId("icmpAction").selectedIndex = 1;
            } else if (profile.icmpAction == "open") {
                dojo.byId("icmpAction").selectedIndex = 2;
            }
        }
        
        
        uptimeTypeChanged();
    }
    
    now.ready(function() {
        if (loaded) {
          return;
        } else {
          loaded = true;
        }

        now.GetPorts(currentName, function(ports) {
            for (var i = 0; i < ports.length; i++) {
                portList[ports[i].portNum] = ports[i];
                ports[i].isInherited = true;
                addPort(ports[i]);
            }
           portBehaviorChanged();
        });


          now.GetProfile(currentName, function(pfile){
          profile = pfile;
        
        if (newProfile == "true") {
          dojo.byId("name").value = "New Profile";
          dojo.byId("parentName").value = "#{parentName}";
          dojo.byId("inheritPersonality").checked = true;
          dojo.byId("inheritEthernet").checked = true; 
          dojo.byId("inheritDropRate").checked = true; 
          dojo.byId("inheritUptime").checked = true; 
          dojo.byId("inheritTcpAction").checked = true; 
          dojo.byId("inheritUdpAction").checked = true; 
          dojo.byId("inheritIcmpAction").checked = true;  
        } else {
          dojo.byId("name").value = profile.name;
          dojo.byId("parentName").value = profile.parentProfile;
          dojo.byId("inheritPersonality").checked = profile.isPersonalityInherited;
          dojo.byId("inheritEthernet").checked = profile.isEthernetInherited;
          dojo.byId("inheritDropRate").checked = profile.isDropRateInherited;
          dojo.byId("inheritUptime").checked = profile.isUptimeInherited;
          dojo.byId("inheritTcpAction").checked = profile.isTcpActionInherited;
          dojo.byId("inheritUdpAction").checked = profile.isUdpActionInherited;
          dojo.byId("inheritIcmpAction").checked = profile.isIcmpActionInherited;
        }

          
          if (profile.tcpAction == "reset") {
            dojo.byId("tcpAction").selectedIndex = 0;
          } else if (profile.tcpAction == "block") {
            dojo.byId("tcpAction").selectedIndex = 1;
          } else if (profile.tcpAction == "open") {
            dojo.byId("tcpAction").selectedIndex = 2;
          }

          if (profile.udpAction == "reset") {
            dojo.byId("udpAction").selectedIndex = 0;
          } else if (profile.udpAction == "block") {
            dojo.byId("udpAction").selectedIndex = 1;
          } else if (profile.udpAction == "open") {
            dojo.byId("udpAction").selectedIndex = 2;
          }
         
          if (profile.icmpAction == "reset") {
            dojo.byId("icmpAction").selectedIndex = 0;
          } else if (profile.icmpAction == "block") {
            dojo.byId("icmpAction").selectedIndex = 1;
          } else if (profile.icmpAction == "open") {
            dojo.byId("icmpAction").selectedIndex = 2;
          }

          dojo.byId("personality").value = profile.personality;
          dojo.byId("ethernet").value = profile.ethernet;
          dojo.byId("uptimeMin").value = profile.uptimeMin;
          dojo.byId("uptimeMax").value = profile.uptimeMax;
          dojo.byId("dropRate").value = profile.dropRate;


          inheritanceChanged();
        });
      
    });
    });


block content
  mixin defaultActionBox(i)
    select(id=i)
      option reset
      option block
      option open

  h2 Editing Profile

  form(method="post", action="/editHoneydProfileSave")

    table(id="tableEditProfile")
      col
      col
      col(style="width:200px")
      col(style="width:300px")
      
      tr(id="row0")
        td
        td
        td(style="text-align:right")
          label Profile Name
        td
          input#name(type="text", name="name")
      
      tr(id="row1")
        td
        td
        td(style="text-align:right")
          label Parent Profile
        td
          input#parentName(type="text", name="name", disabled="true")
      
 
      tr(id="row2")
        td
          input#inheritPersonality(type="checkbox", name="inheritPersonality", onclick="inheritanceChanged()") 
        td
          label Inherit?
        td(style="text-align:right")
          label Operating System Personality
        td
          select#personality(data-dojo-type="dijit.form.FilteringSelect", name="personality", autocomplete="true", pageSize=10)
            each os in personalities
              option(value="#{os}") #{os}
      
      tr(id="row3")
        td
          input#inheritEthernet(type="checkbox", name="inheritEthernet", onclick="inheritanceChanged()") 
        td
          label Inherit?
        td(style="text-align:right")
          label Ethernet Vendor
        td
          select#ethernet(data-dojo-type="dijit.form.FilteringSelect", name="ethernet", autocomplete="true", pageSize=10)
            each vendor in vendors
              option(value="#{vendor}") #{vendor}
      
      hidden(id="ethVendorLength", value="")
      
      tr(id="row4")
        td
          input#inheritDropRate(type="checkbox", name="inheritDropRate", onclick="inheritanceChanged()") 
        td
          label Inherit?
        td(style="text-align:right")
          label Packet Drop Percentage
        td
          input#dropRate(type="number", name="dropRate", min=0, max=100)


      tr(id="row5")
        td
          input#inheritUptime(type="checkbox", name="inheritUptime", onclick="inheritanceChanged()") 
        td
          label Inherit?
        td(style="text-align:right")
          label Fixed uptime or uptime range?
        td
          select#uptimeType(name="uptimeType", onchange="uptimeTypeChanged()")
            option Fixed
            option Range
        
      tr(id="row6")
        td
        td
        td(style="text-align:right")
          label(id="uptimeLabel") Uptime Range
        td
          input#uptimeMin(type="number", name="uptimeMin", min=0)
          input#uptimeMax(type="number", name="uptimeMax", min=0)

      tr(id="row7")
        td
          input#inheritTcpAction(type="checkbox", name="inheritTcpAction", onclick="inheritanceChanged()") 
        td
          label Inherit?
        td(style="text-align:right")
          label Default TCP Action
        td
          mixin defaultActionBox('tcpAction')
  
      tr(id="row8")
        td
          input#inheritUdpAction(type="checkbox", name="inheritUdpAction", onclick="inheritanceChanged()") 
        td
          label Inherit?
        td(style="text-align:right")
          label Default UDP Action
        td
          mixin defaultActionBox('udpAction')
      tr(id="row9")
        td
          input#inheritIcmpAction(type="checkbox", name="inheritIcmpAction", onclick="inheritanceChanged()") 
        td
          label Inherit?
        td(style="text-align:right")
          label Default ICMP Action
        td
          mixin defaultActionBox('icmpAction')

    br
    
    h3 Profile Port Configuration
    table#portTable

    button(type="button", onClick="addPort()") Add New Port

    br
    br
    br
    
    button#saveButton(type="button", onclick="saveChanges()") Save Changes

