extends layout

block topPannelAdditions
  div(style="float: left") Novad Status:&nbsp 
  div#nova_status unknown
  div(style="float: left") Haystack Status:&nbsp  
  div#haystack_status unknown
 

block content
  h1 Nova Control Panel
  button(type="button", style="width:160px", onClick='now.StartNovad()') Start Nova
  button(type="button", style="width:160px", onClick='now.StopNovad()') Stop Nova
  
  br
  br
  
  button(type="button", style="width:160px", onClick='now.StartHaystack()') Start Haystack
  button(type="button", style="width:160px", onClick='now.StopHaystack()') Stop Haystack
  
  br
  br
  
  button(type="button", style="width:160px", onClick='now.ClearAllSuspects(); suspectGrid.store.fetch({onComplete: clearSuspects});') Clear All Suspects

  br

  div#nova_suspects_header
    h1 Suspect List
    button#liveUpdateButton(data-dojo-type="dijit.form.Button",type="button") Pause Updates/Auto Scrolling
      script(type="dojo/method", data-dojo-event="onClick", data-dojo-args="evt")
        | liveUpdate = !liveUpdate;
        | if (!liveUpdate) {dojo.byId("liveUpdateButton").innerHTML = "Unpause updates/Auto Scrolling";}
        | else {dojo.byId("liveUpdateButton").innerHTML = "Pause updates/Auto Scrolling";}
    br
    br
    
    label Filter by IP (supports * and ?)
    input#ipFilter(type="text", name="ipFilter", value="*", data-dojo-type="dijit.form.TextBox", intermediateChanges=true, onchange="ipFilterChange()")
        
    br
  div#nova_suspects
  div(data-dojo-type="dijit.layout.ContentPane", title="Suspects", id="nova_suspects_error_view", style="display: none")
   h4 Novad is not currently connected or running. Try starting it.
   
block headerAdditions
  script 
    var suspectStore;
    var suspectGrid;
    var liveUpdate = true;

    require(["dijit/form/TextBox"]);

    function ipFilterChange() {
      var filter = dijit.byId("ipFilter").value;
      dijit.byId("nova_suspects").filter({GetInAddr: filter});
    }
    

    now.updateNovadStatus = function (isNovadUp){
      dojo.byId("nova_status").innerHTML = isNovadUp ? "Up" : "Down";
      dojo.byId("nova_suspects_header").style.display = isNovadUp ? "block" : "none";
      dojo.byId("nova_suspects").style.display = isNovadUp ? "block" : "none";
      dojo.byId("nova_suspects_error_view").style.display = isNovadUp ? "none" : "block";
    };

    now.updateHaystackStatus = function (isHaystackUp){
      dojo.byId("haystack_status").innerHTML = isHaystackUp ? "Up" : "Down";
    };

    now.AllSuspectsCleared = function() {
      suspectGrid.store.fetch({onComplete: clearSuspects});
    }
      
    function pad(num) {
        return ("0" + num.toString()).slice(-2);
    }

    now.OnNewSuspect = function(suspect){
       var type = "#{type}";
      
       console.log("Type is " + type);
       console.log("Classification is " + suspect.GetClassification);
       if (type == "hostile" && !suspect.GetIsHostile) {return;}
       if (type == "unclassified" && (suspect.GetClassification > 0)) {return;}
       if (type == "all" && suspect.GetClassification < 0) {return;}

       if(!liveUpdate) {return;}


      var d = new Date(suspect.GetLastPacketTime*1000);
      var dString = pad(d.getMonth()) + "/" + pad(d.getDate()) + " " + pad(d.getHours()) + ":" + pad(d.getMinutes()) + ":" + pad(d.getSeconds());
      suspect.LastPacketString = dString;
      // This is probably a really bad way to do this...
      for (var i in suspect.GetFeatures) {  
        suspect[i] = suspect.GetFeatures[i];
      }
      if( suspectStore.get(suspect.GetInAddr) ) {       
        suspectStore.put(suspect,{id: suspect.GetInAddr, overwrite: true});
        suspectGrid.render();
      } else {
        suspectStore.add(suspect,{id: suspect.GetInAddr}); 
      }
    };

    var clearSuspects = function(items, request){
      dojo.forEach(items, function(i) {
        console.log("Deleted item " + i.GetInAddr);
        suspectGrid.store.deleteItem(i);
        suspectStore.remove(i.GetInAddr);
      });
    };


    require(["dojo/ready","dojo/store/Memory", "dojo/store/Observable", "dojo/data/ObjectStore"], function(ready){ready(function(){ 
    dojo.addOnLoad(function(){
      suspectStore = new dojo.store.Memory();
      suspectStore.idProperty="GetInAddr";
      // Formatter for the classification
      function classificationFormatter(d) {
        
        var bar = new dijit.ProgressBar({progress:d, maximum:1}, "bar");
        bar._destroyOnRemove = true;
        return bar;
      }

      // Formatter for the floating point features
      function featureFormatter(d) {
        var num = new Number(d);
        return (num.toFixed(2));
      }
    
    require(["dojox/grid/DataGrid","dojo/data/ObjectStore","dojo/domReady!"],
    function(DataGrid,ObjectStore){

    var enabledFeatures = String(#{enabledFeatures});
    var gridStructure = new Array();
    gridStructure.push({name:"Address", field:"GetInAddr", width:"125px"});
    gridStructure.push({name:"Classification", field:"GetClassification", width:"150px", formatter: classificationFormatter});
    gridStructure.push({name:"Last Seen", field:"LastPacketString", width: "100px"});
    gridStructure.push({name:"Hostile", field:"GetIsHostile"});
    if (enabledFeatures.charAt(0) == "1") gridStructure.push({name:"IP traffic distribution", field:"0", formatter: featureFormatter});
    if (enabledFeatures.charAt(1) == "1") gridStructure.push({name:"Port traffic distribution", field:"1", formatter: featureFormatter});
    if (enabledFeatures.charAt(2) == "1") gridStructure.push({name:"Haystack event frequency", field:"2", formatter: featureFormatter});
    if (enabledFeatures.charAt(3) == "1") gridStructure.push({name:"Packet Size Mean", field:"3", formatter: featureFormatter});
    if (enabledFeatures.charAt(4) == "1") gridStructure.push({name:"Packet Size Deviation", field:"4", formatter: featureFormatter});
    if (enabledFeatures.charAt(5) == "1") gridStructure.push({name:"IPs Contacted", field:"5"});
    if (enabledFeatures.charAt(6) == "1") gridStructure.push({name:"Ports Contacted", field:"6"});
    if (enabledFeatures.charAt(7) == "1") gridStructure.push({name:"Packet Interval Mean", field:"7", formatter: featureFormatter});
    if (enabledFeatures.charAt(8) == "1") gridStructure.push({name:"Packet Interval Deviation", field:"8", formatter: featureFormatter});
    if (enabledFeatures.charAt(9) == "1") gridStructure.push({name:"TCP Percent SYN", field:"9", formatter: featureFormatter});
    if (enabledFeatures.charAt(10) == "1") gridStructure.push({name:"TCP Percent FIN", field:"10", formatter: featureFormatter});
    if (enabledFeatures.charAt(11) == "1") gridStructure.push({name:"TCP Percent RST", field:"11", formatter: featureFormatter});
    if (enabledFeatures.charAt(12) == "1") gridStructure.push({name:"TCP Percent SYN ACK", field:"12", formatter: featureFormatter});
    if (enabledFeatures.charAt(13) == "1") gridStructure.push({name:"Haystack Percent Contacted", field:"13", formatter: featureFormatter});
    
    suspectGrid = new DataGrid(
    {
      store: dataStore = dojo.data.ObjectStore({objectStore: suspectStore}),
      sortInfo: -2,
      autoWidth: true,
      structure: gridStructure,
      rowsPerPage: 20
    }, 
    "nova_suspects"
    );
    suspectGrid.startup();
    now.sendAllSuspects(now.OnNewSuspect);
    });
    });

    }); });

