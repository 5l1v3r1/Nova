script
  var servicePrefs = '#{SERVICE_PREFERENCES}';
  var loaded = false;

  function updateEnabledFeaturesString(whichFeature)
  {
    var enabledMask = document.getElementById("ENABLED_FEATURES").getAttribute("value");
    
    var changeTo = "";
    
    if(document.getElementById("feature" + whichFeature).checked)
    {
      for(var i in enabledMask)
      {
        if(i == whichFeature)
        {
          changeTo += "1";
        }
        else
        {
          changeTo += enabledMask[i];
        }
      }
    }
    else
    {
      for(var i in enabledMask)
      {
        if(i == whichFeature)
        {
          changeTo += "0";
        }
        else
        {
          changeTo += enabledMask[i];
        }
      }
    }
    
    document.getElementById("ENABLED_FEATURES").setAttribute("value", changeTo);
    document.getElementById("enabledFeaturesLabel").innerHTML = "Features Mask: " + changeTo;
  }
  
  function setServicePreferences()
  {
    document.getElementById("sp").value = servicePrefs;
  }
  
  function fillServicePrefDiv()
  {
    var arr = [];
    arr = servicePrefs.split(':');
    
    var syslogLevel = arr[1][0];
    var libnotifyLevel = arr[2][0];
    var emailLevel = arr[3][0];
    var sysMod = ((arr[1][1] == "-" || arr[1][1] == "+") ? arr[1][1] : "");
    var notifyMod = ((arr[2][1] == "-" || arr[2][1] == "+") ? arr[2][1] : "");
    var emailMod = ((arr[3][1] == "-" || arr[3][1] == "+") ? arr[3][1] : "");
    
    var syslogSection = document.createElement("div");
    syslogSection.id = "syslogDiv";
    
    var syslogLabel = document.createElement("label");
    syslogLabel.value = "Syslog";
    syslogLabel.innerHTML = "Syslog at";
    
    var syslogLevelSelect = document.createElement("select");
    syslogLevelSelect.id = "syslogLevelSelect";
    syslogLevelSelect.setAttribute('onchange', 'onValueChange()');
    
    var syslogModSelect = document.createElement("select");
    syslogModSelect.id = 'syslogModSelect';
    syslogModSelect.setAttribute('onchange', 'onValueChange()');
    
    var options = ["DEBUG", "INFO", "NOTICE", "WARNING", "ERROR", "CRITICAL", "ALERT", "EMERGENCY"];
    var mods = ["", "+", "-"];
    
    for(var i = 0; i < options.length; i++)
    {
      var option = document.createElement("option");
      option.value = i;
      option.id = options[i];
      option.innerHTML = options[i];
      
      if(i == syslogLevel)
      {
        option.selected = true;
      }
      
      syslogLevelSelect.appendChild(option);
    }
    
    for(var i = 0; i < mods.length; i++)
    {
      var option = document.createElement("option");
      option.value = mods[i];
      option.id = mods[i];
      
      switch(mods[i])
      {
        case '': option.innerHTML = "only";
                 option.id = "NA";
                 break;
        case '+': option.innerHTML = "or higher";
                  break;
        case '-': option.innerHTML = "or lower";
                  break;
      }
      
      if(mods[i] == sysMod)
      {
        option.selected = true;
      }
      
      syslogModSelect.appendChild(option);
    }
    
    syslogSection.appendChild(syslogLabel);
    syslogSection.appendChild(syslogLevelSelect);
    syslogSection.appendChild(syslogModSelect);
    
    var notifySection = document.createElement("div");
    notifySection.id = "notifyDiv";
    
    var notifyLabel = document.createElement("label");
    notifyLabel.value = "notify";
    notifyLabel.innerHTML = "Libnotify at";
    
    var notifyLevelSelect = document.createElement("select");
    notifyLevelSelect.id = "notifyLevelSelect";
    notifyLevelSelect.setAttribute('onchange', 'onValueChange()');
    
    var notifyModSelect = document.createElement("select");
    notifyModSelect.id = 'notifyModSelect';
    notifyModSelect.setAttribute('onchange', 'onValueChange()');
    
    for(var i = 0; i < options.length; i++)
    {
      var option = document.createElement("option");
      option.value = i;
      option.id = options[i];
      option.innerHTML = options[i];
      
      if(i == libnotifyLevel)
      {
        option.selected = true;
      }
      
     notifyLevelSelect.appendChild(option);
    }
    
    for(var i = 0; i < mods.length; i++)
    {
      var option = document.createElement("option");
      option.value = mods[i];
      option.id = mods[i];
      
      switch(mods[i])
      {
        case '': option.innerHTML = "only";
                 option.id = "NA";
                 break;
        case '+': option.innerHTML = "or higher";
                  break;
        case '-': option.innerHTML = "or lower";
                  break;
      }
      
      if(mods[i] == notifyMod)
      {
        option.selected = true;
      }
      
      notifyModSelect.appendChild(option);
    }
    
    notifySection.appendChild(notifyLabel);
    notifySection.appendChild(notifyLevelSelect);
    notifySection.appendChild(notifyModSelect);
    
    var emailSection = document.createElement("div");
    emailSection.id = "emailDiv";
    
    var emailLabel = document.createElement("label");
    emailLabel.value = "email";
    emailLabel.innerHTML = "Email alerts at";
    
    var emailLevelSelect = document.createElement("select");
    emailLevelSelect.id = "emailLevelSelect";
    emailLevelSelect.setAttribute('onchange', 'onValueChange()');
    
    var emailModSelect = document.createElement("select");
    emailModSelect.id = 'emailModSelect';
    emailModSelect.setAttribute('onchange', 'onValueChange()');
    
    for(var i = 0; i < options.length; i++)
    {
      var option = document.createElement("option");
      option.value = i;
      option.id = options[i];
      option.innerHTML = options[i];
      
      if(i == emailLevel)
      {
        option.selected = true;
      }
      
     emailLevelSelect.appendChild(option);
    }
    
    for(var i = 0; i < mods.length; i++)
    {
      var option = document.createElement("option");
      option.value = mods[i];
      option.id = mods[i];
      
      switch(mods[i])
      {
        case '': option.innerHTML = "only";
                 option.id = "NA";
                 break;
        case '+': option.innerHTML = "or higher";
                  break;
        case '-': option.innerHTML = "or lower";
                  break;
      }
      
      if(mods[i] == emailMod)
      {
        option.selected = true;
      }
      
      emailModSelect.appendChild(option);
    }
    
    emailSection.appendChild(emailLabel);
    emailSection.appendChild(emailLevelSelect);
    emailSection.appendChild(emailModSelect);
    
    document.getElementById("servicePrefs").appendChild(syslogSection);
    document.getElementById("servicePrefs").appendChild(notifySection);
    document.getElementById("servicePrefs").appendChild(emailSection);
  }
  
  function onValueChange()
  {
    var newServicePrefString = "0:";
    newServicePrefString += document.getElementById("syslogLevelSelect").value;
    var checkSysMod = document.getElementById("syslogModSelect").value;
    newServicePrefString += (checkSysMod != "NA" ? checkSysMod : "");
    newServicePrefString += ";1:";
    newServicePrefString += document.getElementById("notifyLevelSelect").value;
    var checkNotifyMod = document.getElementById("notifyModSelect").value;
    newServicePrefString += (checkNotifyMod != "NA" ? checkNotifyMod : "");
    newServicePrefString += ";2:";
    newServicePrefString += document.getElementById("emailLevelSelect").value;
    var checkEmailMod = document.getElementById("emailModSelect").value;
    newServicePrefString += (checkEmailMod != "NA" ? checkEmailMod : "");
    newServicePrefString += ";";
    servicePrefs = newServicePrefString;
    setServicePreferences();
  }
  
  now.ready(function()
  {
    if(loaded)
    {
      return;
    }
    else
    {
      loaded = true;
    }
    
    if(document.getElementById("sp") !== undefined)
    {
      setServicePreferences();
      fillServicePrefDiv();
    }
  });
  
  
form(method="post", action="/configureNovaSave")
  h2 General Configuration

  h2 Silent Alarm
  label Port
  input(type="number", step="1", min="1025", max="65535", name="SILENT_ALARM_PORT",  value=SILENT_ALARM_PORT)
  br
  
  label Max Connection Attempts
  input(type="number", step="1", min="0", name="SA_MAX_ATTEMPTS", value=SA_MAX_ATTEMPTS)
  br
  
  label Sleep Duration
  input(type="text", name="SA_SLEEP_DURATION",  value=SA_SLEEP_DURATION)
  br

  h2 File Paths
  label Path to state save file
  input(type="text", name="CE_SAVE_FILE",  value=CE_SAVE_FILE)
  br
  
  label Path to training file
  input(type="text", name="DATAFILE",  value=DATAFILE)
  br
   
  label Path to PCAP file
  input(type="text", name="PCAP_FILE",  value=PCAP_FILE)
  br

  label Path to User Honeyd Config
  input(type="text", name="USER_HONEYD_CONFIG",  value=USER_HONEYD_CONFIG)
  br
  
  
  label Path to Haystack Honeyd Config File
  input(type="text", name="HS_HONEYD_CONFIG",  value=HS_HONEYD_CONFIG)
  br

  h2 TCP Timeout
  label TCP Timeout
  input(type="number", step="1", min="0", name="TCP_TIMEOUT",  value=TCP_TIMEOUT)
  br

  label TCP Timeout Check Frequency
  input(type="number", step="1", min="0", name="TCP_CHECK_FREQ",  value=TCP_CHECK_FREQ)
  br

  h2 Special Run Settings
  label Read PCAP file?
  br
  if READ_PCAP != "0"
    |Yes
    input(type="radio", name="READ_PCAP", value="1", checked)
    br
    |No
    input(type="radio", name="READ_PCAP", value="0")
    br
  else
    |Yes
    input(type="radio", name="READ_PCAP", value="1")
    br
    |No
    input(type="radio", name="READ_PCAP", value="0", checked)
    br
  br

  label Go to live capture after PCAP?
  br
  if GO_TO_LIVE != "0"
    |Yes
    input(type="radio", name="GO_TO_LIVE", value="1", checked)
    br
    |No
    input(type="radio", name="GO_TO_LIVE", value="0")
    br
  else
    |Yes
    input(type="radio", name="GO_TO_LIVE", value="1")
    br
    |No
    input(type="radio", name="GO_TO_LIVE", value="0", checked)
    br
  br
  

  h2 Classification Settings
  label(style="text-align:center;vertical-align:middle", id="enabledFeaturesLabel", name="ENABLED_FEATURES") Features Mask: #{ENABLED_FEATURES}
  br
  br
  table
    thead
      tr 
        td
          label(style="text-align:center;vertical-align:middle;font:bold;") Feature Name
        td
          label(style="text-align:center;vertical-align:middle;font:bold;") Enabled? 
    tbody
      - for(var i = 0; i < FEATURE_NAMES.length; i++)
        - if(ENABLED_FEATURES[i] == 1)
          tr
            td(style="text-align:center;vertical-align:middle;") 
              #{FEATURE_NAMES[i]}
            td
              input(type="checkbox", value="#{i}", id="feature#{i}", checked, onclick="updateEnabledFeaturesString(#{i})")
        - else
          tr
            td(style="text-align:center;vertical-align:middle;")
              #{FEATURE_NAMES[i]}
            td
              input(type="checkbox", value="#{i}", id="feature#{i}", onclick="updateEnabledFeaturesString(#{i})")
  br
  
  input(type="hidden", id="ENABLED_FEATURES", name="ENABLED_FEATURES", value="#{ENABLED_FEATURES}")
  
  hidden(id="length", value=FEATURE_NAMES.length)
  
  label Neighbors
  input(type="number", step="1", min="1", name="K",  value=K)
  br
  
  label Classification Timeout
  input(type="number", step="1", min="0", name="CLASSIFICATION_TIMEOUT",  value=CLASSIFICATION_TIMEOUT)
  br

  label EPS
  input(name="EPS",  value=EPS)
  br

  label Classification Threshold
  input(name="CLASSIFICATION_THRESHOLD",  value=CLASSIFICATION_THRESHOLD)
  br

  h2 Training Mode Settings
  label Training mode?
  br

  if IS_TRAINING != "0"
    |Yes
    input(type="radio", name="IS_TRAINING", value="1", checked)
    br
    |No
    input(type="radio", name="IS_TRAINING", value="0")
    br
  else
    |Yes
    input(type="radio", name="IS_TRAINING", value="1")
    br
    |No
    input(type="radio", name="IS_TRAINING", value="0", checked)
    br
  br
  
  label Training Capture folder
  input(name="TRAINING_CAP_FOLDER",  value=TRAINING_CAP_FOLDER)
  br
  
  label Thinning Distance
  input(name="THINNING_DISTANCE",  value=THINNING_DISTANCE)
  br

  h2 Doppelganger
  label Doppelganger IP
  input(name="DOPPELGANGER_IP",  value=DOPPELGANGER_IP)
  br

  label State save frequency
  input(type="number", min="0", name="SAVE_FREQUENCY",  value=SAVE_FREQUENCY)
  br

  label Data TTL
  input(type="number", min="0", name="DATA_TTL",  value=DATA_TTL)
  br

  h2 Logger Settings
  label Service Preferences
  div(id="servicePrefs")
    input(id="sp", name="SERVICE_PREFERENCES", value="", readonly=true)
  br

  label Haystack Storage
  input(name="HAYSTACK_STORAGE",  value=HAYSTACK_STORAGE)
  br


