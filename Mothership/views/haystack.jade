extends layout

block content
  table
    thead
      tr
        th Connected Clients
        th Groups
    tbody
      tr
        td
          div(id='clientsList')
        td
          div(id='groupsList')

  h1 Haystack Autoconfiguration Options
  div(id="autoconfElements")
  button(id="sendAutoconfig", onclick="processAutoconfigElements()", disabled=true) Configure Selected Haystacks

block headerAdditions
  script(type="text/javascript", src="scripts/ConnectionManagement.js")
  script
    var clients = "#{CLIENTS}".split(':');
    var groups = !{GROUPS};
    var message = {};
    message.id = '';
    var elementCount = 0;
    
    function setTarget(source, target)
    {
      var firstIndex = message.id.indexOf(target + ":");
      
      var groupToAdd = ((target.split(':')[1] != '' && target.split(':')[1] != undefined) ? document.getElementById(source).parentNode.id : '');
      
      console.log('groupToAdd ' + groupToAdd);
      
      console.log('firstIndex == ' + firstIndex);
      
      if((document.getElementById(source).checked) && (firstIndex === -1))
      {
        message.id += target + ':';
        console.log('message.id ' + message.id);
        var targets = target.split(':');
        for(var i in targets)
        {
          if(targets[i] != undefined && targets[i] != '')
          {
            createAutoconfigElement(targets[i], groupToAdd);
          }
        }
      }
      else if(firstIndex >= 0)
      {
        // If unselected, remove target from message.id
        var regex = new RegExp(target + ':', 'i');
        message.id = message.id.replace(regex, '');
        var targets = target.split(':');
        for(var i in targets)
        {
          if(targets[i] != undefined && targets[i] != '')
          {
            removeAutoconfigElement(targets[i]);
          }
        }
        console.log('message.id ' + message.id);
      }
      else
      {
        console.log(source + ' is not checked, can not do anything until target client is set');
        console.log('message.id ' + message.id);
      }
    }
    
    function createAutoconfigElement(clientName, group)
    {
      var div = document.createElement('div');
      div.id = 'autohook' + elementCount;
      var label = document.createElement('label');
      label.value = clientName;
      label.innerHTML = clientName;
      var input = document.createElement('input');
      input.type = 'number';
      input.min = '0';
      //This needs to be found dynamically
      input.max = '1024';
      input.value = '0';
      //dropDown needs to be a dojo select containing a list of the interfaces on the 
      //host with clientId clientName
      var dropDown = document.createElement('select');
      now.GetInterfacesOfClient(clientName, function(interfaces){
        for(var i in interfaces)
        {
          var option = document.createElement('option');
          option.value = interfaces[i];
          option.innerHTML = interfaces[i];
          dropDown.appendChild(option);
        }
      });
      div.appendChild(label);
      div.appendChild(input);
      div.appendChild(dropDown);
      if(group != '')
      {
        
      }
      else
      {
        document.getElementById('autoconfElements').appendChild(div);
      }
      document.getElementById('sendAutoconfig').removeAttribute('disabled');
      elementCount++;
    }
    
    function removeAutoconfigElement(target)
    {
      for(var i = 0; i < elementCount; i++)
      {
        if(document.getElementById('autohook' + i).childNodes[0].value == target)
        {
          document.getElementById('autoconfElements').removeChild(document.getElementById('autohook' + i));
        }
      }
      elementCount--;
      if(elementCount == 0)
      {
        document.getElementById('sendAutoconfig').setAttribute('disabled', true);
      }
    }

    function processAutoconfigElements()
    {
      console.log('Processing autoconfig selections...');
      for(var i = 0; i < elementCount; i++)
      {
        var autoconfMessage = {};
        autoconfMessage.type = 'haystackConfig';
        autoconfMessage.id = document.getElementById('autohook' + i).childNodes[0].value;
        autoconfMessage.numNodes = document.getElementById('autohook' + i).childNodes[1].value;
        autoconfMessage.interface = document.getElementById('autohook' + i).childNodes[2].value;
        now.MessageSend(autoconfMessage);
      }
    }
    
    now.ready(function(){
      setUpSelect('clientsList');
      setUpGrouplist('groupsList');
      now.RenderConnectionsList();
    });
