extends layout

block content
  div#setup
    label(style='font-weight: bold') Message Targets:
    input(readonly=true, id='showtargets')
  
    h1 Nova Control Panel
    
    table
      thead
        tr
          th Connected Clients
          th Groups
      tbody
        tr
          td
            div(id='clientsList')
          td
            div(id='groupsList')
  
    br
  
    button(id='button0', style='width: 160px', onclick='startNovad();', disabled=true) Start Classifying
    button(id='button1', style='width: 160px',  onclick='stopNovad();', disabled=true) Stop Classifying
  
    br
    br
  
    button(id='button2', style='width: 160px',  onclick='startHaystack();', disabled=true) Start Haystack
    button(id='button3', style='width: 160px',  onclick='stopHaystack();', disabled=true) Stop Haystack
  
    br
    br
  
    button(id="button4", style="width: 160px", onclick='requestBenign();', disabled=true) Get Benign Suspects
    button(id="button5", style="width: 160px", onclick='stopRequestBenign()', disabled=true) Cancel Benign Request
    
    br
    br
  
    h2 Currently Requesting Benign Suspects From:
    input(id="benignList", readonly=true)
  
    div#nova_suspects_header
      h1 Suspect List
      //button#liveUpdateButton(data-dojo-type="dijit.form.Button",type="button") Pause Updates/Auto Scrolling
      //  script(type="dojo/method", data-dojo-event="onClick", data-dojo-args="evt")
      //    | liveUpdate = !liveUpdate;
      //    | if (!liveUpdate) {dojo.byId("liveUpdateButton").innerHTML = "Unpause table refreshing";}
      //    | else {dojo.byId("liveUpdateButton").innerHTML = "Pause table refreshing";}
      //br
      br
      
      
      a(href="javascript:void(0)", onclick="document.getElementById('advancedFiltering').style.display='block';")
        p Advanced Filtering Options
      div#advancedFiltering(style="display: none;")
        br
        p Filter by IP (supports standard regular expressions. Example: "192\.168\.10\..*|192\.168\.3\..*")
        input#ipFilter(type="text", name="ipFilter", value="")
        br
        p Filter by clientId (will match with STRING_ENTERED*)
        input#clientFilter(type='text', name='clientFilter', value="")
        br
        button(onClick='applyAdvancedFilter()') Apply Advanced Filters
        button(onClick='disableAdvancedFilter()') Disable Advanced Filters
      div#tablePages
      br
  
    div#nova_suspects
      table#suspectTable
    div(data-dojo-type="dijit.layout.ContentPane", title="Suspects", id="nova_suspects_error_view", style="display: none")
      h4 Novad is not currently connected or running. Try starting it.
    
  div(id="lightbox", class="white_content")
    div(id='spinnerDiv', style="height: 30px; padding-botton: 30px;")
    div(id='details', style='height: 60%; width: auto; overflow-y: scroll; overflow-x: hidden')
    button(id='close', onclick='closeLightbox()') Close
   
block headerAdditions
  link(rel="stylesheet", type="text/css", href="novagrid.css", media="screen")
  script(type="text/javascript", src="scripts/NovaGrid.js")
  script(type="text/javascript", src="scripts/ConnectionManagement.js")
  script(type="text/javascript", src="scripts/spin.js")
  script
    // Performance boost accessing local var over document lookup
    var theDoc = document;

    var clientCount = 0;
    var suspectGrid;
    var liveUpdate = true;
    var lastNovadStatus = "unknown";

    var advancedFilters = new Object();
    var advancedFilterEnabled = false;
    var advancedIpFilter = null;
    var clientIdFilter = null;

    var spinner = null;

    var message = {};
    message.id = '';

    var clients = "#{CLIENTS}".split(':');
    var groups = !{GROUPS};

    function getDetails(suspect)
    {
      var send = {};
      var splitString = suspect.split('@');
      var ip = splitString[0];
      splitString = splitString[1].split('_');
      var clientId = splitString[0];
      var iface = splitString[1];
      
      send.ip = ip;
      send.clientId = clientId;
      send.interface = iface;
      
      now.GetSuspectDetails(send);
      
      splitString = null;
      
      theDoc.getElementById("lightbox").style.display = 'block';
      theDoc.getElementById("setup").style.display = 'none';
      var opts = {
          lines: 17,
          length: 0,
          width: 4,
          radius: 27,
          corners: 0.6,
          rotate: 0,
          color: '#E8A02F',
          speed: 1,
          trail: 34,
          shadow: false,
          hwaccel: false,
          className: 'spinner',
          zIndex: 1003,
          top: 20,
          left: 'auto'
      };
      
      spinner = new Spinner(opts).spin(theDoc.getElementById('spinnerDiv'));
      theDoc.getElementById('spinnerDiv').style.height = ((opts.radius * 2) + 30)+ 'px';
      var divWidth = theDoc.getElementById('lightbox').scrollWidth;
      theDoc.getElementById('details').style.width = divWidth + 'px';
      theDoc.getElementById('details').style.height = '95%';
    }

    function closeLightbox()
    {
      theDoc.getElementById('lightbox').style.display = 'none';
      theDoc.getElementById('setup').style.display = 'block'; 
      while(theDoc.getElementById('details').hasChildNodes())
      {
        theDoc.getElementById('details').removeChild(theDoc.getElementById('details').lastChild); 
      }
    }

    now.RenderSuspectDetails = function(detailString)
    {
      if(theDoc.getElementById('lightbox').style.display == 'block')
      {
        spinner.stop();
        spinner = null;
        
        theDoc.getElementById('spinnerDiv').style.height = '0px';
        
        var list = detailString.split('\\n');
        
        if(list[0].indexOf('Unable') != -1)
        {
          var sorry = theDoc.createElement('p');
          sorry.innerHTML = 'Unable to complete request, please check that Novad';
          var sorry1 = theDoc.createElement('p');
          sorry1.innerHTML = ' is running on the client the suspect was requested from';
          theDoc.getElementById('details').appendChild(sorry);
          theDoc.getElementById('details').appendChild(sorry1);
          return; 
        }
        
        for(var i in list)
        {
          if(list[i] != '')
          {
            var p = theDoc.createElement('p');
            p.innerHTML = list[i];
            theDoc.getElementById('details').appendChild(p);
          }  
        }
      }
      else
      {
        console.log('did not hit block check');
        return; 
      }
    };

    function startNovad()
    {
        message.type = 'startNovad';
        now.MessageSend(message);
    }

    function stopNovad()
    {
        message.type = 'stopNovad';
        now.MessageSend(message);
    }

    function startHaystack()
    {
        message.type = 'startHaystack';
        now.MessageSend(message);
    }

    function stopHaystack()
    {
        message.type = 'stopHaystack';
        now.MessageSend(message);
    }

    function requestBenign()
    {
      document.getElementById('benignList').value = message.id;
      message.type = 'requestBenign';
      now.MessageSend(message);
    }

    function stopRequestBenign()
    {
      message.type = 'cancelRequestBenign';
      now.MessageSend(message);
      var assign = message.id;
      var remove = message.id.split(':');
      for(var i in remove)
      {
        if((remove[i] != '' || remove[i] != undefined) && assign.indexOf(remove[i]) != -1)
        {
          var regex = new RegExp(remove[i] + ':', 'i')
          assign = assign.replace(regex, '');
        }
      }
      theDoc.getElementById('benignList').value = assign;
    }

    function setTarget(source, target, group)
    {
        if(group == 'true' || group == true)
        {
          if(theDoc.getElementById(source).checked)
          {
            message.id = target + ":";
            var targets = target.split(":");

            for(var i in theDoc.getElementById('groupsList').childNodes)
            {
              if(theDoc.getElementById('groupcheck' + i) != undefined && theDoc.getElementById('groupcheck' + i).id.indexOf(source) == -1)
              {
                theDoc.getElementById('groupcheck' + i).setAttribute('disabled', true);
              }
            }
            for(var i in theDoc.getElementById('clientsList').childNodes)
            {
              if(theDoc.getElementById('check' + i) != undefined)
              {
                theDoc.getElementById('check' + i).checked = false;
                theDoc.getElementById('check' + i).setAttribute('disabled', true);
              } 
            }
            for(var i = 0; i < 6; i++)
            {
              theDoc.getElementById('button' + i).removeAttribute('disabled'); 
            }
          }
          else
          {
            message.id = '';
            for(var i in theDoc.getElementById('groupsList').childNodes)
            {
              if(theDoc.getElementById('groupcheck' + i) != undefined && theDoc.getElementById('groupcheck' + i).id.indexOf(source) == -1)
              {
                theDoc.getElementById('groupcheck' + i).removeAttribute('disabled');
              }
            }
            for(var i in theDoc.getElementById('clientsList').childNodes)
            {
              if(theDoc.getElementById('check' + i) != undefined)
              {
                theDoc.getElementById('check' + i).removeAttribute('disabled');
              } 
            }
            for(var i = 0; i < 6; i++)
            {
              theDoc.getElementById('button' + i).setAttribute('disabled', true); 
            }
          }
        }
        else
        {
          if(theDoc.getElementById(source).checked)
          {
            message.id += target + ':';
            for(var i = 0; i < 6; i++)
            {
              theDoc.getElementById('button' + i).removeAttribute('disabled'); 
            }
          }
          else
          {
            var regex = new RegExp(target + ':', 'i');
            message.id = message.id.replace(regex, '');
          }
          
          if(message.id == '')
          {
            for(var i = 0; i < 6; i++)
            {
              theDoc.getElementById('button' + i).setAttribute('disabled', true); 
            }
          }
        }
        theDoc.getElementById('showtargets').value = message.id.replace(new RegExp(':', 'g'), ',').substr(0, message.id.length - 1);
    }

    require(["dijit/form/TextBox"]);

    var ClearAllSuspects = function() 
    {
        try 
        {
            now.ClearAllSuspects();
        } 
        catch(err) 
        {
            alert("Action failed because unable to connect to server! Please try refreshing the page and trying again.");
            console.log("err was: " + err);
        } 
    }

    now.AllSuspectsCleared = function() {
      suspectGrid.Clear();
    };
    
    now.SuspectCleared = function(suspect) {
        console.log("Cleared suspect ");
        console.log(suspect);
        suspectGrid.DeleteRow(suspect.ip);
        suspectGrid.Render();
        return;
    };
      
    function pad(num) {
        return ("0" + num.toString()).slice(-2);
    }

    now.OnNewSuspect = function(suspect){
      var type = suspect.type;
  
      var row = new Array();
      // This is probably a really bad way to do this...
      var inner = '<button onclick=getDetails("' + String(suspect.ip) + '@' + String(suspect.client) + '_' + String(suspect.interface) + '");>' + String(suspect.ip) + '@' + String(suspect.client) + '_' + String(suspect.interface) + '</button>';
      row.push(String(inner));
      row.push(String(suspect.client));
      row.push(parseFloat(suspect.classification));
      row.push(String(suspect.lastpacket));
      row.push(String(suspect.ishostile));

       if(advancedFilterEnabled) 
       {
         if(advancedIpFilter != null) 
         {
            if(!advancedIpFilter.test(suspect.ip)) 
            {
                return;
            }
         }
         if(clientIdFilter != null)
         {
           if(!clientIdFilter.test(suspect.client))
           {
             return; 
           }
         }
       }

      suspectGrid.PushEntry(row);
    };

    var applyAdvancedFilter = function() 
    {
        var patt = new RegExp("^[1234567890x\. ()<>=!&|]+$");

        var filter = theDoc.getElementById("ipFilter").value;
        if(filter != "") 
        {
          try 
          {
              advancedIpFilter = new RegExp(filter);
          } 
          catch(err) 
          {
              alert("Invalid filter: " + filter);
              return;
          }
        }
        else
        {
          advancedIpFilter = null; 
        }
        var clientFilter = theDoc.getElementById("clientFilter").value;
        if(clientFilter != "")
        {
          try
          {
            clientIdFilter = new RegExp(clientFilter);
          }
          catch(err)
          {
            alert("Invalid filter: " + clientFilter);
            return; 
          }
        }
        else
        {
          clientIdFilter = null; 
        }

        advancedFilterEnabled = true;
        suspectGrid.Clear();  
        now.ClearSuspectIPs(function(length){
          console.log('in callback, suspectIPs reports length ' + length);
          now.GetHostileSuspects();
        });
    };

    var disableAdvancedFilter = function() 
    {
        theDoc.getElementById('advancedFiltering').style.display='none';
        
        advancedFilterEnabled = false;
        var advancedFilters = new Object();
        
        suspectGrid.Clear();
        now.ClearSuspectIPs(function(length){
          console.log('in callback, suspectIPs reports length ' + length);
          now.GetHostileSuspects();
        });
    }
              
    function featureFormatter(d) 
    {
        var num = new Number(d);
        return (num.toFixed(2));
    }

    function classificationFormatter(d) 
    {
        var num = 100 * d;
        if (num > 0) 
        {
            // Minor performance boost, don't bother with coloring those < than 5% hostile, barely shows anyway
            if (num > 5) 
            {
                return '<div style="background: rgba(255, 0, 0, ' + d.toFixed(2) + ');">' + num.toFixed(2) + "%</div>";
            } 
            else 
            {
                return num.toFixed(2) + "%";
            }
        } 
        else 
        {
            if (num == -100) 
            {
                return "Invalid";
            } 
            else if (num == -200) 
            {
                return "Not Enough Data";
            } 
            else 
            {
                return "Error";
            }
        }
    }
    
    function onGridRendered() 
    {
       var gridSize = suspectGrid.GetNumberOfPages();
       var currentPage = suspectGrid.GetCurrentPage();

       var temp = theDoc.createElement('a');
       theDoc.getElementById("tablePages").innerHTML = "";

       var pageLink = theDoc.createElement('a');
       pageLink.setAttribute('href', '#');
       pageLink.setAttribute('onclick', 'suspectGrid.PreviousPage();');
       var pageLinkText = theDoc.createTextNode(" <-- ");
       pageLink.appendChild(pageLinkText);
       theDoc.getElementById("tablePages").appendChild(pageLink);

       for (var i = 0; i < gridSize; i++) 
       {
           var pageLink = theDoc.createElement('a');
           pageLink.setAttribute('href', '#');
           pageLink.setAttribute('onclick', 'suspectGrid.SetCurrentPage( ' + i + ');');

           var pageLinkText = theDoc.createTextNode(" " + (i + 1) + " ");
           pageLink.appendChild(pageLinkText);

           if (i == currentPage) 
           {
               var boldTag = theDoc.createElement('b');
               boldTag.appendChild(pageLink);

               theDoc.getElementById("tablePages").appendChild(boldTag);
           } 
           else 
           {
               theDoc.getElementById("tablePages").appendChild(pageLink);
           }    
       }

       var pageLink = theDoc.createElement('a');
       pageLink.setAttribute('href', '#');
       pageLink.setAttribute('onclick', 'suspectGrid.NextPage();');
       var pageLinkText = theDoc.createTextNode(" --> ");
       pageLink.appendChild(pageLinkText);
       theDoc.getElementById("tablePages").appendChild(pageLink);
    }
    
    function Init() {
      var gridStructure = new Array();
      gridStructure.push({name: "Address"});
      gridStructure.push({name: "Client ID"});
      gridStructure.push({name: "Classification", formatter: classificationFormatter});
      gridStructure.push({name: "Last Seen"});
      gridStructure.push({name: "Hostile"});
 
      suspectGrid = new NovaGrid(gridStructure, 0, theDoc.getElementById('suspectTable'));

      // Sort by classification by default
      suspectGrid.SetSortByKey(2);
      suspectGrid.SetRowsPerPage(100);
      suspectGrid.SetRenderCallback(onGridRendered);

      theDoc.getElementById("suspectTable").innerHTML = suspectGrid.GetTable();
      
      now.GetHostileSuspects();
      
      setInterval(function(){
              suspectGrid.Render();
      }, 3000);   
    }

    require(["dojo/ready", "dojo/domReady!"], function(ready){
      ready(function() {
        now.ready(function() {
          Init();
          now.GetClients(now.RenderConnectionsList);
          now.SetUpNotificationsButton();
          now.SetUpHostileEventsButton(now.UpdateHostileEventsButton('read'));
          now.GetClients(function(list){
            for(var i in list)
            {
              if(list[i] != '')
              {
                now.UpdateConnectionsList(list[i], 'updateStatus');  
              } 
            }
          });
          setUpSelect('clientsList');
          setUpGrouplist('groupsList');
        });
      });
    });

