extends layout

block headerAdditions
  script
    var clients = "#{CLIENTS}".split(':');
    if(clients[0] == '')
    {
      clients.length = 0;
      clients = new Array();
    }
    var clientCount = 0;
    var groups = !{GROUPS};
  
    var maintainGroups = new Array();
  
    function setUpSelect()
    {     
        if(clients == '' || clients.length == 0)
        {
          
          var label = document.createElement('label');
          label.id = 'noClients';
          label.value = 'noClients';
          label.innerHTML = 'There are no clients currently connected';
          document.getElementById('clientsList').appendChild(label);
        }  
        else
        {
          for(var i = 0; i < clients.length; i++)
          {
            var deleteMe = document.getElementById('noClients');
            if(deleteMe != undefined)
            {
                document.getElementById('clientsList').removeChild(deleteMe);
            }
            if(clients[i] != undefined && clients[i] != "undefined" && clients[i] != '')
            {
                var div = document.createElement('div');
                div.id = clients[i];
                var check = document.createElement('input');
                check.type = 'checkbox';
                check.id = 'check' + i;
                check.name = 'check' + i;
                check.value = clients[i];
                check.setAttribute('onchange', 'setTarget(("check" + ' + i + '), clients[' + i + '].toString())');
                check.setAttribute('style', 'padding-left: 50px');
                var label = document.createElement('label');
                label.value = clients[i];
                label.innerHTML = clients[i];
                label.setAttribute('style', 'font-weight: bold; padding-left: 50px');
                div.appendChild(check);
                div.appendChild(label);
                document.getElementById('clientsList').appendChild(div);
                clientCount++;
            }
          }
        }
    }

    function setTarget(source, target)
    {
      
    }

    function setUpGroups()
    {
      if(groups == undefined)
      {
        return;
      }
      
      var groupList = groups.groups.split(':');
      var memberList = groups.members.split('|');
      var ah = document.getElementById('appendHook');
      
      for(var i in groupList)
      {
        if(groupList[i] != '')
        {
          maintainGroups.push({group:groupList[i],idx:i});
          var tr = document.createElement('tr');
          tr.id = 'group' + i;
          
          var td1 = document.createElement('td');
          var td2 = document.createElement('td');
          
          var label = document.createElement('label');
          label.id = 'groupLabel' + i;
          label.innerHTML = groupList[i];
          label.value = groupList[i];
          var input = document.createElement('input');
          input.id = 'members' + i;
          input.value = memberList[i];
          if(groupList[i] == 'all')
          {
            input.setAttribute('readonly', 'true');
          }
          
          td1.appendChild(label);
          td2.appendChild(input);
          tr.appendChild(td1);
          tr.appendChild(td2);
          
          if(groupList[i] != 'all')
          {
            var td3 = document.createElement('td');
            var deleteButton = document.createElement('button');
            deleteButton.setAttribute('onclick', 'removeGroup("groupLabel' + i + '")');
            deleteButton.innerHTML = 'Delete';
            td3.appendChild(deleteButton);
            tr.appendChild(td3);
            
            var td4 = document.createElement('td');
            var updateButton = document.createElement('button');
            updateButton.setAttribute('onclick', 'updateGroup(document.getElementById("groupLabel' + i + '").value, document.getElementById("members' + i + '").value)');
            updateButton.innerHTML = 'Update';
            td4.appendChild(updateButton);
            tr.appendChild(td4);
          }
          
          ah.appendChild(tr);
        }
      }
    }
    
    function getMembers()
    {
      if(clients == '' || clients.length == 0)
      {
        return undefined;
      }
      else
      {
        var members = '';
        for(var i = 0; i < clientCount; i++)
        {
          if(document.getElementById('check' + i) != null && document.getElementById('check' + i).checked)
          {
            members += document.getElementById('check' + i).value + ','
          }
        }
        if(members[members.length - 1] == ',')
        {
          members = members.substr(0, members.length - 1);
        }
        if(members == '')
        {
          return undefined;
        }
        
        return members;
      }
    }
    
    function removeGroup(group)
    {
      var groupToRemove = document.getElementById(group).value;
      now.RemoveGroup(groupToRemove);
      document.getElementById('appendHook').removeChild(document.getElementById('group' + group.substr(10)));
    }

    function updateGroup(group, newMembers)
    {
      now.UpdateGroup(group, newMembers);
      var idx = 0;
      for(var i in maintainGroups)
      {
        if(group == maintainGroups[i].group)
        {
          idx = maintainGroups[i].idx;
        }
      }
      document.getElementById('members' + idx).value = newMembers;
    }

    function addGroup(group, members)
    {
      if(members != undefined && group != undefined)
      {
        for(var i in maintainGroups)
        {
          if(group == maintainGroups[i].group)
          {
            alert('Cannot have identical group names');
            return;
          }
        }
        
        maintainGroups.push({group:group,idx:parseInt(clientCount) + 1});
       
        now.AddGroup(group, members);
        
        document.getElementById('groupName').value = '';
        
        var ah = document.getElementById('appendHook');
        
        var tr = document.createElement('tr');
        tr.id = 'group' + (parseInt(clientCount) + 1);
        
        var td1 = document.createElement('td');
        var td2 = document.createElement('td');
        
        var label = document.createElement('label');
        label.id = 'groupLabel' + (parseInt(clientCount) + 1);
        label.innerHTML = group;
        label.value = group;
        var input = document.createElement('input');
        input.id = 'members' + (parseInt(clientCount) + 1);
        input.value = members;
        
        td1.appendChild(label);
        td2.appendChild(input);
        tr.appendChild(td1);
        tr.appendChild(td2);
        
        if(group != 'all')
        {
          var td3 = document.createElement('td');
          var deleteButton = document.createElement('button');
          deleteButton.setAttribute('onclick', 'removeGroup("groupLabel' + (parseInt(clientCount) + 1) + '")');
          deleteButton.innerHTML = 'Delete';
          td3.appendChild(deleteButton);
          tr.appendChild(td3);
          
          var td4 = document.createElement('td');
          var updateButton = document.createElement('button');
          updateButton.setAttribute('onclick', 'updateGroup(document.getElementById("groupLabel' + (parseInt(clientCount) + 1) + '").value, document.getElementById("members' + (parseInt(clientCount) + 1) + '").value)');
          updateButton.innerHTML = 'Update';
          td4.appendChild(updateButton);
          tr.appendChild(td4);
        }
        
        ah.appendChild(tr);
      }
      else
      {
        alert('To add a group, at least one client must be checked and a group name must be entered!');
      }
    }

    now.UpdateConnectionsList = function(clientId, action) {
      var divClientList = document.getElementById('clientsList');
      
      switch(action)
      {
        case 'add':
          var deleteMe = document.getElementById('noClients');
          if(deleteMe != undefined)
          {
              divClientList.removeChild(deleteMe);
          }
          for(var i = 0; i < clientCount; i++)
          {
            if(document.getElementById('groupLabel' + i).value == clientId)
            {
              console.log(clientId + ' needlessly attempting to re-establish connection, doing nothing');
              return;
            }
          }
          var div = document.createElement('div');
          div.id = clientId;
          var check = document.createElement('input');
          check.type = 'checkbox';
          check.id = 'check' + (parseInt(clientCount) + 1);
          check.name = 'check' + (parseInt(clientCount) + 1);
          check.value = clientId;
          check.setAttribute('onchange', 'setTarget(("check" + ' + (parseInt(clientCount) + 1) + '), clients[' + (parseInt(clientCount) + 1) + '].toString())');
          check.setAttribute('style', 'padding-left: 50px');
          var label = document.createElement('label');
          label.value = clientId;
          label.innerHTML = clientId;
          label.setAttribute('style', 'font-weight: bold; padding-left: 50px');
          div.appendChild(check);
          div.appendChild(label);
          divClientList.appendChild(div);
          clientCount++;
          
          clients.push(clientId);
          
          updateGroup('all', clients.join());
          break;
        case 'remove':
          divClientList.removeChild(document.getElementById(clientId));
          clientCount--;
          for(var i in clients)
          {
            if(clients[i] == clientId)
            {
              clients.splice(i, 1);
            }
          }
          if(clientCount == 0)
          {
            
            var label = document.createElement('label');
            label.id = 'noClients';
            label.value = 'noClients';
            label.innerHTML = 'There are no clients currently connected';
            document.getElementById('clientsList').appendChild(label);
          } 
          updateGroup('all', clients.join());
          break;
        default:
          console.log('UpdateConnectionsList called with invalid action, doing nothing');
          break;
      }
    }

    now.ready(function(){
      setUpSelect();
      setUpGroups();
      
      var members = '';
      
      for(var i = 0; i < clientCount; i++)
      {
        members += clients[i] + ',';
      }
      if(members[members.length - 1] == ',')
      {
        members = members.substr(0, members.length - 1);
      }
      
      updateGroup('all', members);
    });

block content
  h1 Connected Clients List
  div(id='clientsList')
  br
  br
  h1 Add Group
  label New Group Name: 
  input(id='groupName', value='')
  button(id='addGroup', onclick='addGroup(document.getElementById("groupName").value, getMembers())') Add Group
  h1 Current Groups
  table(id='groupsList')
    thead
      tr
        th Group
        th Members
    tbody(id='appendHook')
  br
  br