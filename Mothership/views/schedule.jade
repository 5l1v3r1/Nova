extends layout

block content
  table
    thead
      tr
        th Connected Clients
        th Groups
    tbody
      tr
        td
          div(id='clientsList')
        td
          div(id='groupsList')
  br
  br
  div(id="elementHook")
  br
  button(onclick="submitSchedule()") Submit Scheduling Changes
          
block headerAdditions
  script(type="text/javascript", src="scripts/ConnectionManagement.js")
  script
    var clients = "#{CLIENTS}".split(':');
    var groups = !{GROUPS};
    var messageTypes = "#{TYPES}".split(',');
    var message = {};
    message.id = '';
    
    function setTarget(source, target, group)
    {
      if(group == 'true' || group == true)
      {
        while(document.getElementById('elementHook').hasChildNodes())
        {
          document.getElementById('elementHook').removeChild(document.getElementById('elementHook').lastChild);
        }
        
        if(document.getElementById(source).checked)
        {
          message.id = target + ":";
          var targets = target.split(":");

          for(var i in targets)
          {
            if(targets[i] != '' && targets[i] != undefined)
            {
              createScheduledEventElement(targets[i]);
            } 
          }

          for(var i in document.getElementById('groupsList').childNodes)
          {
            if(document.getElementById('groupcheck' + i) != undefined && document.getElementById('groupcheck' + i).id.indexOf(source) == -1)
            {
              document.getElementById('groupcheck' + i).setAttribute('disabled', true);
            }
          }
          for(var i in document.getElementById('clientsList').childNodes)
          {
            if(document.getElementById('check' + i) != undefined)
            {
              document.getElementById('check' + i).checked = false;
              document.getElementById('check' + i).setAttribute('disabled', true);
            } 
          }
        }
        else
        {
          message.id = '';
          var targets = target.split(':');
          
          while(document.getElementById('elementHook').hasChildNodes())
          {
            document.getElementById('elementHook').removeChild(document.getElementById('elementHook').lastChild);
          }
          for(var i in document.getElementById('groupsList').childNodes)
          {
            if(document.getElementById('groupcheck' + i) != undefined && document.getElementById('groupcheck' + i).id.indexOf(source) == -1)
            {
              document.getElementById('groupcheck' + i).removeAttribute('disabled');
            }
          }
          for(var i in document.getElementById('clientsList').childNodes)
          {
            if(document.getElementById('check' + i) != undefined)
            {
              document.getElementById('check' + i).removeAttribute('disabled');
            } 
          }
        }
      }
      else
      {
        if(document.getElementById(source).checked)
        {
          message.id += target + ':';
          createScheduledEventElement(target);
        }
        else
        {
          var regex = new RegExp(target + ':', 'i');
          message.id = message.id.replace(regex, '');
          document.getElementById('elementHook').removeChild(document.getElementById(target));
        }
      }
    }
    
    function createScheduledEventElement(clientId)
    {
      var borderDiv = document.createElement('div');
      borderDiv.id = clientId;
      borderDiv.setAttribute('style', 'border: 2px solid; border-radius: 12px; background: #E8A02F; width: 65%;');
      
      var label0 = document.createElement('label');
      label0.innerHTML = clientId;
      label0.setAttribute('style', 'font-weight: bold');
      
      var typeSelect = document.createElement('select');
      typeSelect.id = clientId + 'select';
      
      for(var i in messageTypes)
      {
        if(messageTypes[i] != '' && messageTypes[i] != undefined)
        {
          var option = document.createElement('option');
          option.value = messageTypes[i];
          option.innerHTML = messageTypes[i];
          typeSelect.appendChild(option);
        }
      }
      
      typeSelect.setAttribute('onclick', 'newTypeSelected("' + clientId + '")');
      
      var b0 = document.createElement('br');
      var b1 = document.createElement('br');
      var b2 = document.createElement('br');
      var b3 = document.createElement('br');
      var b4 = document.createElement('br');
      var b5 = document.createElement('br');
      
      var label3 = document.createElement('label');
      label3.innerHTML = 'Every ';
      
      var intervalNum = document.createElement('input');
      intervalNum.type = 'number';
      intervalNum.min = '1';
      intervalNum.max = '100';
      intervalNum.id = clientId + 'intervalNum';
      
      var intervalType = document.createElement('select');
      intervalType.id = clientId + 'intervalType';
      
      var label4 = document.createElement('label');
      label4.innerHTML = 'Event Name: ';
      
      var name = document.createElement('input');
      name.id = clientId + 'name';
      
      var label5 = document.createElement('label');
      label5.innerHTML = 'Cron String: ';
      
      var cron = document.createElement('input');
      cron.id = clientId + 'cron';
      
      var exLabel = document.createElement('exLabel');
      exLabel.innerHTML = '(W, L and # are not supported for the cron syntax. Use 0 for Sunday, not 7)';
      exLabel.setAttribute('style', 'font-style: italic');
      
      var options = ['minutes', 'hours', 'days'];
      
      for(var i in options)
      {
        var option = document.createElement('option');
        option.value = options[i];
        option.innerHTML = options[i];
        intervalType.appendChild(option); 
      }
      
      borderDiv.appendChild(label0);
      borderDiv.appendChild(typeSelect);
      borderDiv.appendChild(b0);
      borderDiv.appendChild(label5);
      borderDiv.appendChild(cron);
      borderDiv.appendChild(b3);
      borderDiv.appendChild(exLabel);
      borderDiv.appendChild(b5);
      borderDiv.appendChild(label4);
      borderDiv.appendChild(name);
      
      document.getElementById('elementHook').appendChild(borderDiv);
    }
    
    function newTypeSelected(clientId)
    {
      // For when message types requiring arguments are supported
    }
    
    function registerScheduledMessage(clientId, name, message, cron)
    {
      now.SetScheduledMessage(clientId, name, message, cron);
    }
    
    function unregisterScheduledMessage(clientId, name)
    {
      if(name == "" || name == undefined)
      { 
        return; 
      }
      else
      {
        console.log('would be unregistering ' + clientId + ' here'); 
      }
    }
    
    function submitSchedule()
    {
      for(var i in document.getElementById('elementHook').childNodes)
      {
        var id = document.getElementById('elementHook').childNodes[i].id; 
        if(id != undefined)
        {
          if((document.getElementById(id + 'name').value != '')
          && (document.getElementById(id + 'cron').value != ''))
          {
            var name = document.getElementById(id + 'name').value;
            
            var registerMessage = {};
            registerMessage.type = document.getElementById(id + 'select').value;
            
            var cron = document.getElementById(id + 'cron').value;
            
            registerScheduledMessage(id, name, registerMessage, cron);
            
            document.getElementById('elementHook').removeChild(document.getElementById(id));
            document.getElementById(id + 'div').childNodes[0].checked = false;
          }
          else if(document.getElementById(id + 'name').value == '')
          {
            console.log('Scheduled event must have a name.'); 
          }
          else if(document.getElementById(id + 'cron').value == '')
          {
            console.log('Scheduled event must have a cron string');
          }
        }
      }
    }
    
    now.ready(function(){
      setUpSelect('clientsList');
      setUpGrouplist('groupsList');
      now.GetClients(now.RenderConnectionsList);
      now.SetUpNotificationsButton();
      now.SetUpHostileEventsButton();
    });